{"ast":null,"code":"'use strict';\n\nimport { SensorType } from \"../../commonTypes.js\";\nimport { ReanimatedError } from \"../../errors.js\";\nimport { logger } from \"../../logger/index.js\";\nimport { mockedRequestAnimationFrame } from \"../../mockedRequestAnimationFrame.js\";\nimport { isChromeDebugger, isJest, isWeb, isWindowAvailable } from \"../../PlatformChecker.js\";\nimport { WorkletsModule } from \"../../worklets/index.js\";\nexport function createJSReanimatedModule() {\n  return new JSReanimated();\n}\nconst requestAnimationFrameImpl = isJest() || !globalThis.requestAnimationFrame ? mockedRequestAnimationFrame : globalThis.requestAnimationFrame;\nclass JSReanimated {\n  #workletsModule = WorkletsModule;\n  nextSensorId = 0;\n  sensors = new Map();\n  platform = undefined;\n  scheduleOnUI(worklet) {\n    requestAnimationFrameImpl(worklet);\n  }\n  createWorkletRuntime(_name, _initializer) {\n    throw new ReanimatedError('createWorkletRuntime is not available in JSReanimated.');\n  }\n  scheduleOnRuntime() {\n    throw new ReanimatedError('scheduleOnRuntime is not available in JSReanimated.');\n  }\n  registerEventHandler(_eventHandler, _eventName, _emitterReactTag) {\n    throw new ReanimatedError('registerEventHandler is not available in JSReanimated.');\n  }\n  unregisterEventHandler(_) {\n    throw new ReanimatedError('unregisterEventHandler is not available in JSReanimated.');\n  }\n  enableLayoutAnimations() {\n    if (isWeb()) {\n      logger.warn('Layout Animations are not supported on web yet.');\n    } else if (isJest()) {\n      logger.warn('Layout Animations are no-ops when using Jest.');\n    } else if (isChromeDebugger()) {\n      logger.warn('Layout Animations are no-ops when using Chrome Debugger.');\n    } else {\n      logger.warn('Layout Animations are not supported on this configuration.');\n    }\n  }\n  configureLayoutAnimationBatch() {}\n  setShouldAnimateExitingForTag() {}\n  registerSensor(sensorType, interval, _iosReferenceFrame, eventHandler) {\n    if (!isWindowAvailable()) {\n      return -1;\n    }\n    if (this.platform === undefined) {\n      this.detectPlatform();\n    }\n    if (!(this.getSensorName(sensorType) in window)) {\n      logger.warn('Sensor is not available.' + (isWeb() && location.protocol !== 'https:' ? ' Make sure you use secure origin with `npx expo start --web --https`.' : '') + (this.platform === Platform.WEB_IOS ? ' For iOS web, you will also have to also grant permission in the browser: https://dev.to/li/how-to-requestpermission-for-devicemotion-and-deviceorientation-events-in-ios-13-46g2.' : ''));\n      return -1;\n    }\n    if (this.platform === undefined) {\n      this.detectPlatform();\n    }\n    const sensor = this.initializeSensor(sensorType, interval);\n    sensor.addEventListener('reading', this.getSensorCallback(sensor, sensorType, eventHandler));\n    sensor.start();\n    this.sensors.set(this.nextSensorId, sensor);\n    return this.nextSensorId++;\n  }\n  getSensorCallback = (sensor, sensorType, eventHandler) => {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n      case SensorType.GRAVITY:\n        return () => {\n          let {\n            x,\n            y,\n            z\n          } = sensor;\n          if (this.platform === Platform.WEB_ANDROID) {\n            [x, y, z] = [-x, -y, -z];\n          }\n          eventHandler({\n            x,\n            y,\n            z,\n            interfaceOrientation: 0\n          });\n        };\n      case SensorType.GYROSCOPE:\n      case SensorType.MAGNETIC_FIELD:\n        return () => {\n          const {\n            x,\n            y,\n            z\n          } = sensor;\n          eventHandler({\n            x,\n            y,\n            z,\n            interfaceOrientation: 0\n          });\n        };\n      case SensorType.ROTATION:\n        return () => {\n          let [qw, qx, qy, qz] = sensor.quaternion;\n          if (this.platform === Platform.WEB_ANDROID) {\n            [qy, qz] = [qz, -qy];\n          }\n          const yaw = -Math.atan2(2.0 * (qy * qz + qw * qx), qw * qw - qx * qx - qy * qy + qz * qz);\n          const pitch = Math.sin(-2.0 * (qx * qz - qw * qy));\n          const roll = -Math.atan2(2.0 * (qx * qy + qw * qz), qw * qw + qx * qx - qy * qy - qz * qz);\n          eventHandler({\n            qw,\n            qx,\n            qy,\n            qz,\n            yaw,\n            pitch,\n            roll,\n            interfaceOrientation: 0\n          });\n        };\n    }\n  };\n  unregisterSensor(id) {\n    const sensor = this.sensors.get(id);\n    if (sensor !== undefined) {\n      sensor.stop();\n      this.sensors.delete(id);\n    }\n  }\n  subscribeForKeyboardEvents(_) {\n    if (isWeb()) {\n      logger.warn('useAnimatedKeyboard is not available on web yet.');\n    } else if (isJest()) {\n      logger.warn('useAnimatedKeyboard is not available when using Jest.');\n    } else if (isChromeDebugger()) {\n      logger.warn('useAnimatedKeyboard is not available when using Chrome Debugger.');\n    } else {\n      logger.warn('useAnimatedKeyboard is not available on this configuration.');\n    }\n    return -1;\n  }\n  unsubscribeFromKeyboardEvents(_) {}\n  initializeSensor(sensorType, interval) {\n    const config = interval <= 0 ? {\n      referenceFrame: 'device'\n    } : {\n      frequency: 1000 / interval\n    };\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return new window.Accelerometer(config);\n      case SensorType.GYROSCOPE:\n        return new window.Gyroscope(config);\n      case SensorType.GRAVITY:\n        return new window.GravitySensor(config);\n      case SensorType.MAGNETIC_FIELD:\n        return new window.Magnetometer(config);\n      case SensorType.ROTATION:\n        return new window.AbsoluteOrientationSensor(config);\n    }\n  }\n  getSensorName(sensorType) {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return 'Accelerometer';\n      case SensorType.GRAVITY:\n        return 'GravitySensor';\n      case SensorType.GYROSCOPE:\n        return 'Gyroscope';\n      case SensorType.MAGNETIC_FIELD:\n        return 'Magnetometer';\n      case SensorType.ROTATION:\n        return 'AbsoluteOrientationSensor';\n    }\n  }\n  detectPlatform() {\n    const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n    if (userAgent === undefined) {\n      this.platform = Platform.UNKNOWN;\n    } else if (/iPad|iPhone|iPod/.test(userAgent)) {\n      this.platform = Platform.WEB_IOS;\n    } else if (/android/i.test(userAgent)) {\n      this.platform = Platform.WEB_ANDROID;\n    } else {\n      this.platform = Platform.WEB;\n    }\n  }\n  getViewProp(_viewTag, _propName, _component, _callback) {\n    throw new ReanimatedError('getViewProp is not available in JSReanimated.');\n  }\n  configureProps() {\n    throw new ReanimatedError('configureProps is not available in JSReanimated.');\n  }\n  executeOnUIRuntimeSync(_shareable) {\n    throw new ReanimatedError('`executeOnUIRuntimeSync` is not available in JSReanimated.');\n  }\n  markNodeAsRemovable(_shadowNodeWrapper) {\n    throw new ReanimatedError('markNodeAsRemovable is not available in JSReanimated.');\n  }\n  unmarkNodeAsRemovable(_viewTag) {\n    throw new ReanimatedError('unmarkNodeAsRemovable is not available in JSReanimated.');\n  }\n}\nexport let Platform = function (Platform) {\n  Platform[\"WEB_IOS\"] = \"web iOS\";\n  Platform[\"WEB_ANDROID\"] = \"web Android\";\n  Platform[\"WEB\"] = \"web\";\n  Platform[\"UNKNOWN\"] = \"unknown\";\n  return Platform;\n}({});","map":{"version":3,"names":["SensorType","ReanimatedError","logger","mockedRequestAnimationFrame","isChromeDebugger","isJest","isWeb","isWindowAvailable","WorkletsModule","createJSReanimatedModule","JSReanimated","requestAnimationFrameImpl","globalThis","requestAnimationFrame","workletsModule","nextSensorId","sensors","Map","platform","undefined","scheduleOnUI","worklet","createWorkletRuntime","_name","_initializer","scheduleOnRuntime","registerEventHandler","_eventHandler","_eventName","_emitterReactTag","unregisterEventHandler","_","enableLayoutAnimations","warn","configureLayoutAnimationBatch","setShouldAnimateExitingForTag","registerSensor","sensorType","interval","_iosReferenceFrame","eventHandler","detectPlatform","getSensorName","window","location","protocol","Platform","WEB_IOS","sensor","initializeSensor","addEventListener","getSensorCallback","start","set","ACCELEROMETER","GRAVITY","x","y","z","WEB_ANDROID","interfaceOrientation","GYROSCOPE","MAGNETIC_FIELD","ROTATION","qw","qx","qy","qz","quaternion","yaw","Math","atan2","pitch","sin","roll","unregisterSensor","id","get","stop","delete","subscribeForKeyboardEvents","unsubscribeFromKeyboardEvents","config","referenceFrame","frequency","Accelerometer","Gyroscope","GravitySensor","Magnetometer","AbsoluteOrientationSensor","userAgent","navigator","vendor","opera","UNKNOWN","test","WEB","getViewProp","_viewTag","_propName","_component","_callback","configureProps","executeOnUIRuntimeSync","_shareable","markNodeAsRemovable","_shadowNodeWrapper","unmarkNodeAsRemovable"],"sources":["C:\\Users\\Ntino\\Desktop\\End of year project\\N-pro\\android-sms-shield-app\\node_modules\\react-native-reanimated\\src\\ReanimatedModule\\js-reanimated\\JSReanimated.ts"],"sourcesContent":["'use strict';\nimport type {\n  IReanimatedModule,\n  IWorkletsModule,\n  ShadowNodeWrapper,\n  ShareableRef,\n  Value3D,\n  ValueRotation,\n  WorkletFunction,\n} from '../../commonTypes';\nimport { SensorType } from '../../commonTypes';\nimport { ReanimatedError } from '../../errors';\nimport { logger } from '../../logger';\nimport { mockedRequestAnimationFrame } from '../../mockedRequestAnimationFrame';\nimport {\n  isChromeDebugger,\n  isJest,\n  isWeb,\n  isWindowAvailable,\n} from '../../PlatformChecker';\nimport type { WorkletRuntime } from '../../runtimes';\nimport { WorkletsModule } from '../../worklets';\nimport type { WebSensor } from './WebSensor';\n\nexport function createJSReanimatedModule(): IReanimatedModule {\n  return new JSReanimated();\n}\n\n// In Node.js environments (like when static rendering with Expo Router)\n// requestAnimationFrame is unavailable, so we use our mock.\n// It also has to be mocked for Jest purposes (see `initializeUIRuntime`).\nconst requestAnimationFrameImpl =\n  isJest() || !globalThis.requestAnimationFrame\n    ? mockedRequestAnimationFrame\n    : globalThis.requestAnimationFrame;\n\nclass JSReanimated implements IReanimatedModule {\n  /**\n   * We keep the instance of `WorkletsModule` here to keep correct coupling of\n   * the modules and initialization order.\n   */\n  #workletsModule: IWorkletsModule = WorkletsModule;\n  nextSensorId = 0;\n  sensors = new Map<number, WebSensor>();\n  platform?: Platform = undefined;\n\n  scheduleOnUI<T>(worklet: ShareableRef<T>) {\n    // @ts-ignore web implementation has still not been updated after the rewrite, this will be addressed once the web implementation updates are ready\n    requestAnimationFrameImpl(worklet);\n  }\n\n  createWorkletRuntime(\n    _name: string,\n    _initializer: ShareableRef<() => void>\n  ): WorkletRuntime {\n    throw new ReanimatedError(\n      'createWorkletRuntime is not available in JSReanimated.'\n    );\n  }\n\n  scheduleOnRuntime() {\n    throw new ReanimatedError(\n      'scheduleOnRuntime is not available in JSReanimated.'\n    );\n  }\n\n  registerEventHandler<T>(\n    _eventHandler: ShareableRef<T>,\n    _eventName: string,\n    _emitterReactTag: number\n  ): number {\n    throw new ReanimatedError(\n      'registerEventHandler is not available in JSReanimated.'\n    );\n  }\n\n  unregisterEventHandler(_: number): void {\n    throw new ReanimatedError(\n      'unregisterEventHandler is not available in JSReanimated.'\n    );\n  }\n\n  enableLayoutAnimations() {\n    if (isWeb()) {\n      logger.warn('Layout Animations are not supported on web yet.');\n    } else if (isJest()) {\n      logger.warn('Layout Animations are no-ops when using Jest.');\n    } else if (isChromeDebugger()) {\n      logger.warn('Layout Animations are no-ops when using Chrome Debugger.');\n    } else {\n      logger.warn('Layout Animations are not supported on this configuration.');\n    }\n  }\n\n  configureLayoutAnimationBatch() {\n    // no-op\n  }\n\n  setShouldAnimateExitingForTag() {\n    // no-op\n  }\n\n  registerSensor(\n    sensorType: SensorType,\n    interval: number,\n    _iosReferenceFrame: number,\n    eventHandler: ShareableRef<(data: Value3D | ValueRotation) => void>\n  ): number {\n    if (!isWindowAvailable()) {\n      // the window object is unavailable when building the server portion of a site that uses SSG\n      // this check is here to ensure that the server build won't fail\n      return -1;\n    }\n\n    if (this.platform === undefined) {\n      this.detectPlatform();\n    }\n\n    if (!(this.getSensorName(sensorType) in window)) {\n      // https://w3c.github.io/sensors/#secure-context\n      logger.warn(\n        'Sensor is not available.' +\n          (isWeb() && location.protocol !== 'https:'\n            ? ' Make sure you use secure origin with `npx expo start --web --https`.'\n            : '') +\n          (this.platform === Platform.WEB_IOS\n            ? ' For iOS web, you will also have to also grant permission in the browser: https://dev.to/li/how-to-requestpermission-for-devicemotion-and-deviceorientation-events-in-ios-13-46g2.'\n            : '')\n      );\n      return -1;\n    }\n\n    if (this.platform === undefined) {\n      this.detectPlatform();\n    }\n\n    const sensor: WebSensor = this.initializeSensor(sensorType, interval);\n    sensor.addEventListener(\n      'reading',\n      this.getSensorCallback(sensor, sensorType, eventHandler)\n    );\n    sensor.start();\n\n    this.sensors.set(this.nextSensorId, sensor);\n    return this.nextSensorId++;\n  }\n\n  getSensorCallback = (\n    sensor: WebSensor,\n    sensorType: SensorType,\n    eventHandler: ShareableRef<(data: Value3D | ValueRotation) => void>\n  ) => {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n      case SensorType.GRAVITY:\n        return () => {\n          let { x, y, z } = sensor;\n\n          // Web Android sensors have a different coordinate system than iOS\n          if (this.platform === Platform.WEB_ANDROID) {\n            [x, y, z] = [-x, -y, -z];\n          }\n          // TODO TYPESCRIPT on web ShareableRef is the value itself so we call it directly\n          (eventHandler as any)({ x, y, z, interfaceOrientation: 0 });\n        };\n      case SensorType.GYROSCOPE:\n      case SensorType.MAGNETIC_FIELD:\n        return () => {\n          const { x, y, z } = sensor;\n          // TODO TYPESCRIPT on web ShareableRef is the value itself so we call it directly\n          (eventHandler as any)({ x, y, z, interfaceOrientation: 0 });\n        };\n      case SensorType.ROTATION:\n        return () => {\n          let [qw, qx, qy, qz] = sensor.quaternion;\n\n          // Android sensors have a different coordinate system than iOS\n          if (this.platform === Platform.WEB_ANDROID) {\n            [qy, qz] = [qz, -qy];\n          }\n\n          // reference: https://stackoverflow.com/questions/5782658/extracting-yaw-from-a-quaternion\n          const yaw = -Math.atan2(\n            2.0 * (qy * qz + qw * qx),\n            qw * qw - qx * qx - qy * qy + qz * qz\n          );\n          const pitch = Math.sin(-2.0 * (qx * qz - qw * qy));\n          const roll = -Math.atan2(\n            2.0 * (qx * qy + qw * qz),\n            qw * qw + qx * qx - qy * qy - qz * qz\n          );\n          // TODO TYPESCRIPT on web ShareableRef is the value itself so we call it directly\n          (eventHandler as any)({\n            qw,\n            qx,\n            qy,\n            qz,\n            yaw,\n            pitch,\n            roll,\n            interfaceOrientation: 0,\n          });\n        };\n    }\n  };\n\n  unregisterSensor(id: number): void {\n    const sensor: WebSensor | undefined = this.sensors.get(id);\n    if (sensor !== undefined) {\n      sensor.stop();\n      this.sensors.delete(id);\n    }\n  }\n\n  subscribeForKeyboardEvents(_: ShareableRef<WorkletFunction>): number {\n    if (isWeb()) {\n      logger.warn('useAnimatedKeyboard is not available on web yet.');\n    } else if (isJest()) {\n      logger.warn('useAnimatedKeyboard is not available when using Jest.');\n    } else if (isChromeDebugger()) {\n      logger.warn(\n        'useAnimatedKeyboard is not available when using Chrome Debugger.'\n      );\n    } else {\n      logger.warn(\n        'useAnimatedKeyboard is not available on this configuration.'\n      );\n    }\n    return -1;\n  }\n\n  unsubscribeFromKeyboardEvents(_: number): void {\n    // noop\n  }\n\n  initializeSensor(sensorType: SensorType, interval: number): WebSensor {\n    const config =\n      interval <= 0\n        ? { referenceFrame: 'device' }\n        : { frequency: 1000 / interval };\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return new window.Accelerometer(config);\n      case SensorType.GYROSCOPE:\n        return new window.Gyroscope(config);\n      case SensorType.GRAVITY:\n        return new window.GravitySensor(config);\n      case SensorType.MAGNETIC_FIELD:\n        return new window.Magnetometer(config);\n      case SensorType.ROTATION:\n        return new window.AbsoluteOrientationSensor(config);\n    }\n  }\n\n  getSensorName(sensorType: SensorType): string {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return 'Accelerometer';\n      case SensorType.GRAVITY:\n        return 'GravitySensor';\n      case SensorType.GYROSCOPE:\n        return 'Gyroscope';\n      case SensorType.MAGNETIC_FIELD:\n        return 'Magnetometer';\n      case SensorType.ROTATION:\n        return 'AbsoluteOrientationSensor';\n    }\n  }\n\n  detectPlatform() {\n    const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n    if (userAgent === undefined) {\n      this.platform = Platform.UNKNOWN;\n    } else if (/iPad|iPhone|iPod/.test(userAgent)) {\n      this.platform = Platform.WEB_IOS;\n    } else if (/android/i.test(userAgent)) {\n      this.platform = Platform.WEB_ANDROID;\n    } else {\n      this.platform = Platform.WEB;\n    }\n  }\n\n  getViewProp<T>(\n    _viewTag: number,\n    _propName: string,\n    _component?: React.Component,\n    _callback?: (result: T) => void\n  ): Promise<T> {\n    throw new ReanimatedError('getViewProp is not available in JSReanimated.');\n  }\n\n  configureProps() {\n    throw new ReanimatedError(\n      'configureProps is not available in JSReanimated.'\n    );\n  }\n\n  executeOnUIRuntimeSync<T, R>(_shareable: ShareableRef<T>): R {\n    throw new ReanimatedError(\n      '`executeOnUIRuntimeSync` is not available in JSReanimated.'\n    );\n  }\n\n  markNodeAsRemovable(_shadowNodeWrapper: ShadowNodeWrapper): void {\n    throw new ReanimatedError(\n      'markNodeAsRemovable is not available in JSReanimated.'\n    );\n  }\n\n  unmarkNodeAsRemovable(_viewTag: number): void {\n    throw new ReanimatedError(\n      'unmarkNodeAsRemovable is not available in JSReanimated.'\n    );\n  }\n}\n\n// Lack of this export breaks TypeScript generation since\n// an enum transpiles into JavaScript code.\n// ts-prune-ignore-next\nexport enum Platform {\n  WEB_IOS = 'web iOS',\n  WEB_ANDROID = 'web Android',\n  WEB = 'web',\n  UNKNOWN = 'unknown',\n}\n\ndeclare global {\n  interface Navigator {\n    userAgent: string;\n    vendor: string;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}