{"ast":null,"code":"import { UnavailabilityError, Platform } from 'expo-modules-core';\nimport ExpoSMS from './ExpoSMS';\nfunction processAttachments(attachments) {\n  if (!attachments) {\n    return null;\n  }\n  attachments = Array.isArray(attachments) ? attachments : [attachments];\n  if (Platform.OS === 'android' && attachments.length > 1) {\n    if (__DEV__) {\n      console.warn('Android only supports a single attachment. The first array item is used.');\n    }\n    attachments = attachments.slice(0, 1);\n  }\n  return attachments;\n}\nexport async function sendSMSAsync(addresses, message, options) {\n  if (!ExpoSMS.sendSMSAsync) {\n    throw new UnavailabilityError('expo-sms', 'sendSMSAsync');\n  }\n  const finalAddresses = Array.isArray(addresses) ? addresses : [addresses];\n  finalAddresses.forEach(address => {\n    if (address === null || address === undefined) {\n      throw new TypeError('undefined or null address');\n    }\n  });\n  const finalOptions = Object.assign({}, options);\n  if (options?.attachments) {\n    finalOptions.attachments = processAttachments(options?.attachments) || undefined;\n  }\n  return ExpoSMS.sendSMSAsync(finalAddresses, message, finalOptions);\n}\nexport async function isAvailableAsync() {\n  return ExpoSMS.isAvailableAsync?.() ?? false;\n}","map":{"version":3,"names":["UnavailabilityError","Platform","ExpoSMS","processAttachments","attachments","Array","isArray","OS","length","__DEV__","console","warn","slice","sendSMSAsync","addresses","message","options","finalAddresses","forEach","address","undefined","TypeError","finalOptions","Object","assign","isAvailableAsync"],"sources":["C:\\Users\\Ntino\\Desktop\\End of year project\\N-pro\\android-sms-shield-app\\node_modules\\expo-sms\\src\\SMS.ts"],"sourcesContent":["import { UnavailabilityError, Platform } from 'expo-modules-core';\n\nimport ExpoSMS from './ExpoSMS';\nimport { SMSAttachment, SMSResponse, SMSOptions } from './SMS.types';\n\nexport { SMSAttachment, SMSResponse, SMSOptions };\n\nfunction processAttachments(\n  attachments: SMSAttachment | SMSAttachment[] | undefined\n): SMSAttachment[] | null {\n  if (!attachments) {\n    return null;\n  }\n  attachments = Array.isArray(attachments) ? attachments : [attachments];\n  if (Platform.OS === 'android' && attachments.length > 1) {\n    if (__DEV__) {\n      console.warn('Android only supports a single attachment. The first array item is used.');\n    }\n    attachments = attachments.slice(0, 1);\n  }\n  return attachments;\n}\n\n// @needsAudit\n/**\n * Opens the default UI/app for sending SMS messages with prefilled addresses and message.\n *\n * @param addresses An array of addresses (phone numbers) or single address passed as strings. Those\n * would appear as recipients of the prepared message.\n * @param message Message to be sent.\n * @param options A `SMSOptions` object defining additional SMS configuration options.\n *\n * @return Returns a Promise that fulfils with the SMS action is invoked by the user, with corresponding result:\n * - If the user cancelled the SMS sending process: `{ result: 'cancelled' }`.\n * - If the user has sent/scheduled message for sending: `{ result: 'sent' }`.\n * - If the status of the SMS message cannot be determined: `{ result: 'unknown' }`.\n *\n * Android does not provide information about the status of the SMS message, so on Android devices\n * the Promise will always resolve with `{ result: 'unknown' }`.\n *\n * > Note: The only feedback collected by this module is whether any message has been sent. That\n * means we do not check actual content of message nor recipients list.\n *\n * @example\n * ```ts\n * const { result } = await SMS.sendSMSAsync(\n *   ['0123456789', '9876543210'],\n *   'My sample HelloWorld message',\n *   {\n *     attachments: {\n *       uri: 'path/myfile.png',\n *       mimeType: 'image/png',\n *       filename: 'myfile.png',\n *     },\n *   }\n * );\n * ```\n */\nexport async function sendSMSAsync(\n  addresses: string | string[],\n  message: string,\n  options?: SMSOptions\n): Promise<SMSResponse> {\n  if (!ExpoSMS.sendSMSAsync) {\n    throw new UnavailabilityError('expo-sms', 'sendSMSAsync');\n  }\n  const finalAddresses = Array.isArray(addresses) ? addresses : [addresses];\n  finalAddresses.forEach((address) => {\n    if (address === null || address === undefined) {\n      throw new TypeError('undefined or null address');\n    }\n  });\n  const finalOptions = {\n    ...options,\n  } as SMSOptions;\n  if (options?.attachments) {\n    finalOptions.attachments = processAttachments(options?.attachments) || undefined;\n  }\n  return ExpoSMS.sendSMSAsync(finalAddresses, message, finalOptions);\n}\n\n// @needsAudit\n/**\n * Determines whether SMS is available. Always returns `false` in the iOS simulator, and in browser.\n *\n * @return Returns a promise that fulfils with a `boolean`, indicating whether SMS is available on this device.\n *\n * @example\n * ```ts\n * const isAvailable = await SMS.isAvailableAsync();\n * if (isAvailable) {\n *   // do your SMS stuff here\n * } else {\n *   // misfortune... there's no SMS available on this device\n * }\n * ```\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return ExpoSMS.isAvailableAsync?.() ?? false;\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,EAAEC,QAAQ,QAAQ,mBAAmB;AAEjE,OAAOC,OAAO,MAAM,WAAW;AAK/B,SAASC,kBAAkBA,CACzBC,WAAwD;EAExD,IAAI,CAACA,WAAW,EAAE;IAChB,OAAO,IAAI;EACb;EACAA,WAAW,GAAGC,KAAK,CAACC,OAAO,CAACF,WAAW,CAAC,GAAGA,WAAW,GAAG,CAACA,WAAW,CAAC;EACtE,IAAIH,QAAQ,CAACM,EAAE,KAAK,SAAS,IAAIH,WAAW,CAACI,MAAM,GAAG,CAAC,EAAE;IACvD,IAAIC,OAAO,EAAE;MACXC,OAAO,CAACC,IAAI,CAAC,0EAA0E,CAAC;IAC1F;IACAP,WAAW,GAAGA,WAAW,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACvC;EACA,OAAOR,WAAW;AACpB;AAqCA,OAAO,eAAeS,YAAYA,CAChCC,SAA4B,EAC5BC,OAAe,EACfC,OAAoB;EAEpB,IAAI,CAACd,OAAO,CAACW,YAAY,EAAE;IACzB,MAAM,IAAIb,mBAAmB,CAAC,UAAU,EAAE,cAAc,CAAC;EAC3D;EACA,MAAMiB,cAAc,GAAGZ,KAAK,CAACC,OAAO,CAACQ,SAAS,CAAC,GAAGA,SAAS,GAAG,CAACA,SAAS,CAAC;EACzEG,cAAc,CAACC,OAAO,CAAEC,OAAO,IAAI;IACjC,IAAIA,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAKC,SAAS,EAAE;MAC7C,MAAM,IAAIC,SAAS,CAAC,2BAA2B,CAAC;IAClD;EACF,CAAC,CAAC;EACF,MAAMC,YAAY,GAAAC,MAAA,CAAAC,MAAA,KACbR,OAAO,CACG;EACf,IAAIA,OAAO,EAAEZ,WAAW,EAAE;IACxBkB,YAAY,CAAClB,WAAW,GAAGD,kBAAkB,CAACa,OAAO,EAAEZ,WAAW,CAAC,IAAIgB,SAAS;EAClF;EACA,OAAOlB,OAAO,CAACW,YAAY,CAACI,cAAc,EAAEF,OAAO,EAAEO,YAAY,CAAC;AACpE;AAkBA,OAAO,eAAeG,gBAAgBA,CAAA;EACpC,OAAOvB,OAAO,CAACuB,gBAAgB,GAAE,CAAE,IAAI,KAAK;AAC9C","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}