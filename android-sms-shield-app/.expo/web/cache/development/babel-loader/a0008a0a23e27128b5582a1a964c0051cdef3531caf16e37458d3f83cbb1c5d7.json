{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { PointerType } from '../../PointerType';\nimport { State } from '../../State';\nimport PointerTracker from './PointerTracker';\nexport default class GestureHandlerOrchestrator {\n  constructor() {\n    _defineProperty(this, \"gestureHandlers\", []);\n    _defineProperty(this, \"awaitingHandlers\", []);\n    _defineProperty(this, \"awaitingHandlersTags\", new Set());\n    _defineProperty(this, \"handlingChangeSemaphore\", 0);\n    _defineProperty(this, \"activationIndex\", 0);\n  }\n  scheduleFinishedHandlersCleanup() {\n    if (this.handlingChangeSemaphore === 0) {\n      this.cleanupFinishedHandlers();\n    }\n  }\n  cleanHandler(handler) {\n    handler.reset();\n    handler.active = false;\n    handler.awaiting = false;\n    handler.activationIndex = Number.MAX_VALUE;\n  }\n  removeHandlerFromOrchestrator(handler) {\n    const indexInGestureHandlers = this.gestureHandlers.indexOf(handler);\n    const indexInAwaitingHandlers = this.awaitingHandlers.indexOf(handler);\n    if (indexInGestureHandlers >= 0) {\n      this.gestureHandlers.splice(indexInGestureHandlers, 1);\n    }\n    if (indexInAwaitingHandlers >= 0) {\n      this.awaitingHandlers.splice(indexInAwaitingHandlers, 1);\n      this.awaitingHandlersTags.delete(handler.handlerTag);\n    }\n  }\n  cleanupFinishedHandlers() {\n    const handlersToRemove = new Set();\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      const handler = this.gestureHandlers[i];\n      if (this.isFinished(handler.state) && !handler.awaiting) {\n        this.cleanHandler(handler);\n        handlersToRemove.add(handler);\n      }\n    }\n    this.gestureHandlers = this.gestureHandlers.filter(handler => !handlersToRemove.has(handler));\n  }\n  hasOtherHandlerToWaitFor(handler) {\n    const hasToWaitFor = otherHandler => {\n      return !this.isFinished(otherHandler.state) && this.shouldHandlerWaitForOther(handler, otherHandler);\n    };\n    return this.gestureHandlers.some(hasToWaitFor);\n  }\n  shouldBeCancelledByFinishedHandler(handler) {\n    const shouldBeCancelled = otherHandler => {\n      return this.shouldHandlerWaitForOther(handler, otherHandler) && otherHandler.state === State.END;\n    };\n    return this.gestureHandlers.some(shouldBeCancelled);\n  }\n  tryActivate(handler) {\n    if (this.shouldBeCancelledByFinishedHandler(handler)) {\n      handler.cancel();\n      return;\n    }\n    if (this.hasOtherHandlerToWaitFor(handler)) {\n      this.addAwaitingHandler(handler);\n      return;\n    }\n    const handlerState = handler.state;\n    if (handlerState === State.CANCELLED || handlerState === State.FAILED) {\n      return;\n    }\n    if (this.shouldActivate(handler)) {\n      this.makeActive(handler);\n      return;\n    }\n    if (handlerState === State.ACTIVE) {\n      handler.fail();\n      return;\n    }\n    if (handlerState === State.BEGAN) {\n      handler.cancel();\n    }\n  }\n  shouldActivate(handler) {\n    const shouldBeCancelledBy = otherHandler => {\n      return this.shouldHandlerBeCancelledBy(handler, otherHandler);\n    };\n    return !this.gestureHandlers.some(shouldBeCancelledBy);\n  }\n  cleanupAwaitingHandlers(handler) {\n    const shouldWait = otherHandler => {\n      return !otherHandler.awaiting && this.shouldHandlerWaitForOther(otherHandler, handler);\n    };\n    for (const otherHandler of this.awaitingHandlers) {\n      if (shouldWait(otherHandler)) {\n        this.cleanHandler(otherHandler);\n        this.awaitingHandlersTags.delete(otherHandler.handlerTag);\n      }\n    }\n    this.awaitingHandlers = this.awaitingHandlers.filter(otherHandler => this.awaitingHandlersTags.has(otherHandler.handlerTag));\n  }\n  onHandlerStateChange(handler, newState, oldState, sendIfDisabled) {\n    if (!handler.enabled && !sendIfDisabled) {\n      return;\n    }\n    this.handlingChangeSemaphore += 1;\n    if (this.isFinished(newState)) {\n      for (const otherHandler of this.awaitingHandlers) {\n        if (!this.shouldHandlerWaitForOther(otherHandler, handler) || !this.awaitingHandlersTags.has(otherHandler.handlerTag)) {\n          continue;\n        }\n        if (newState !== State.END) {\n          this.tryActivate(otherHandler);\n          continue;\n        }\n        otherHandler.cancel();\n        if (otherHandler.state === State.END) {\n          otherHandler.sendEvent(State.CANCELLED, State.BEGAN);\n        }\n        otherHandler.awaiting = false;\n      }\n    }\n    if (newState === State.ACTIVE) {\n      this.tryActivate(handler);\n    } else if (oldState === State.ACTIVE || oldState === State.END) {\n      if (handler.active) {\n        handler.sendEvent(newState, oldState);\n      } else if (oldState === State.ACTIVE && (newState === State.CANCELLED || newState === State.FAILED)) {\n        handler.sendEvent(newState, State.BEGAN);\n      }\n    } else if (oldState !== State.UNDETERMINED || newState !== State.CANCELLED) {\n      handler.sendEvent(newState, oldState);\n    }\n    this.handlingChangeSemaphore -= 1;\n    this.scheduleFinishedHandlersCleanup();\n    if (!this.awaitingHandlers.includes(handler)) {\n      this.cleanupAwaitingHandlers(handler);\n    }\n  }\n  makeActive(handler) {\n    const currentState = handler.state;\n    handler.active = true;\n    handler.shouldResetProgress = true;\n    handler.activationIndex = this.activationIndex++;\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      if (this.shouldHandlerBeCancelledBy(this.gestureHandlers[i], handler)) {\n        this.gestureHandlers[i].cancel();\n      }\n    }\n    for (const otherHandler of this.awaitingHandlers) {\n      if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n        otherHandler.awaiting = false;\n      }\n    }\n    handler.sendEvent(State.ACTIVE, State.BEGAN);\n    if (currentState !== State.ACTIVE) {\n      handler.sendEvent(State.END, State.ACTIVE);\n      if (currentState !== State.END) {\n        handler.sendEvent(State.UNDETERMINED, State.END);\n      }\n    }\n    if (!handler.awaiting) {\n      return;\n    }\n    handler.awaiting = false;\n    this.awaitingHandlers = this.awaitingHandlers.filter(otherHandler => otherHandler !== handler);\n  }\n  addAwaitingHandler(handler) {\n    if (this.awaitingHandlers.includes(handler)) {\n      return;\n    }\n    this.awaitingHandlers.push(handler);\n    this.awaitingHandlersTags.add(handler.handlerTag);\n    handler.awaiting = true;\n    handler.activationIndex = this.activationIndex++;\n  }\n  recordHandlerIfNotPresent(handler) {\n    if (this.gestureHandlers.includes(handler)) {\n      return;\n    }\n    this.gestureHandlers.push(handler);\n    handler.active = false;\n    handler.awaiting = false;\n    handler.activationIndex = Number.MAX_SAFE_INTEGER;\n  }\n  shouldHandlerWaitForOther(handler, otherHandler) {\n    return handler !== otherHandler && (handler.shouldWaitForHandlerFailure(otherHandler) || otherHandler.shouldRequireToWaitForFailure(handler));\n  }\n  canRunSimultaneously(gh1, gh2) {\n    return gh1 === gh2 || gh1.shouldRecognizeSimultaneously(gh2) || gh2.shouldRecognizeSimultaneously(gh1);\n  }\n  shouldHandlerBeCancelledBy(handler, otherHandler) {\n    if (this.canRunSimultaneously(handler, otherHandler)) {\n      return false;\n    }\n    if (handler.awaiting || handler.state === State.ACTIVE) {\n      return handler.shouldBeCancelledByOther(otherHandler);\n    }\n    const handlerPointers = handler.getTrackedPointersID();\n    const otherPointers = otherHandler.getTrackedPointersID();\n    if (!PointerTracker.shareCommonPointers(handlerPointers, otherPointers) && handler.delegate.view !== otherHandler.delegate.view) {\n      return this.checkOverlap(handler, otherHandler);\n    }\n    return true;\n  }\n  checkOverlap(handler, otherHandler) {\n    const isPointerWithinBothBounds = pointer => {\n      const point = handler.tracker.getLastAbsoluteCoords(pointer);\n      return handler.delegate.isPointerInBounds(point) && otherHandler.delegate.isPointerInBounds(point);\n    };\n    return handler.getTrackedPointersID().some(isPointerWithinBothBounds);\n  }\n  isFinished(state) {\n    return state === State.END || state === State.FAILED || state === State.CANCELLED;\n  }\n  cancelMouseAndPenGestures(currentHandler) {\n    this.gestureHandlers.forEach(handler => {\n      if (handler.pointerType !== PointerType.MOUSE && handler.pointerType !== PointerType.STYLUS) {\n        return;\n      }\n      if (handler !== currentHandler) {\n        handler.cancel();\n      } else {\n        handler.tracker.resetTracker();\n      }\n    });\n  }\n  static get instance() {\n    if (!GestureHandlerOrchestrator._instance) {\n      GestureHandlerOrchestrator._instance = new GestureHandlerOrchestrator();\n    }\n    return GestureHandlerOrchestrator._instance;\n  }\n}\n_defineProperty(GestureHandlerOrchestrator, \"_instance\", void 0);","map":{"version":3,"names":["PointerType","State","PointerTracker","GestureHandlerOrchestrator","constructor","_defineProperty","Set","scheduleFinishedHandlersCleanup","handlingChangeSemaphore","cleanupFinishedHandlers","cleanHandler","handler","reset","active","awaiting","activationIndex","Number","MAX_VALUE","removeHandlerFromOrchestrator","indexInGestureHandlers","gestureHandlers","indexOf","indexInAwaitingHandlers","awaitingHandlers","splice","awaitingHandlersTags","delete","handlerTag","handlersToRemove","i","length","isFinished","state","add","filter","has","hasOtherHandlerToWaitFor","hasToWaitFor","otherHandler","shouldHandlerWaitForOther","some","shouldBeCancelledByFinishedHandler","shouldBeCancelled","END","tryActivate","cancel","addAwaitingHandler","handlerState","CANCELLED","FAILED","shouldActivate","makeActive","ACTIVE","fail","BEGAN","shouldBeCancelledBy","shouldHandlerBeCancelledBy","cleanupAwaitingHandlers","shouldWait","onHandlerStateChange","newState","oldState","sendIfDisabled","enabled","sendEvent","UNDETERMINED","includes","currentState","shouldResetProgress","push","recordHandlerIfNotPresent","MAX_SAFE_INTEGER","shouldWaitForHandlerFailure","shouldRequireToWaitForFailure","canRunSimultaneously","gh1","gh2","shouldRecognizeSimultaneously","shouldBeCancelledByOther","handlerPointers","getTrackedPointersID","otherPointers","shareCommonPointers","delegate","view","checkOverlap","isPointerWithinBothBounds","pointer","point","tracker","getLastAbsoluteCoords","isPointerInBounds","cancelMouseAndPenGestures","currentHandler","forEach","pointerType","MOUSE","STYLUS","resetTracker","instance","_instance"],"sources":["C:\\Users\\Ntino\\Desktop\\End of year project\\N-pro\\android-sms-shield-app\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\GestureHandlerOrchestrator.ts"],"sourcesContent":["import { PointerType } from '../../PointerType';\nimport { State } from '../../State';\n\nimport type IGestureHandler from '../handlers/IGestureHandler';\nimport PointerTracker from './PointerTracker';\n\nexport default class GestureHandlerOrchestrator {\n  private static _instance: GestureHandlerOrchestrator;\n\n  private gestureHandlers: IGestureHandler[] = [];\n  private awaitingHandlers: IGestureHandler[] = [];\n  private awaitingHandlersTags: Set<number> = new Set();\n\n  private handlingChangeSemaphore = 0;\n  private activationIndex = 0;\n\n  // Private beacuse of Singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  private scheduleFinishedHandlersCleanup(): void {\n    if (this.handlingChangeSemaphore === 0) {\n      this.cleanupFinishedHandlers();\n    }\n  }\n\n  private cleanHandler(handler: IGestureHandler): void {\n    handler.reset();\n    handler.active = false;\n    handler.awaiting = false;\n    handler.activationIndex = Number.MAX_VALUE;\n  }\n\n  public removeHandlerFromOrchestrator(handler: IGestureHandler): void {\n    const indexInGestureHandlers = this.gestureHandlers.indexOf(handler);\n    const indexInAwaitingHandlers = this.awaitingHandlers.indexOf(handler);\n\n    if (indexInGestureHandlers >= 0) {\n      this.gestureHandlers.splice(indexInGestureHandlers, 1);\n    }\n\n    if (indexInAwaitingHandlers >= 0) {\n      this.awaitingHandlers.splice(indexInAwaitingHandlers, 1);\n      this.awaitingHandlersTags.delete(handler.handlerTag);\n    }\n  }\n\n  private cleanupFinishedHandlers(): void {\n    const handlersToRemove = new Set<IGestureHandler>();\n\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      const handler = this.gestureHandlers[i];\n\n      if (this.isFinished(handler.state) && !handler.awaiting) {\n        this.cleanHandler(handler);\n        handlersToRemove.add(handler);\n      }\n    }\n\n    this.gestureHandlers = this.gestureHandlers.filter(\n      (handler) => !handlersToRemove.has(handler)\n    );\n  }\n\n  private hasOtherHandlerToWaitFor(handler: IGestureHandler): boolean {\n    const hasToWaitFor = (otherHandler: IGestureHandler) => {\n      return (\n        !this.isFinished(otherHandler.state) &&\n        this.shouldHandlerWaitForOther(handler, otherHandler)\n      );\n    };\n\n    return this.gestureHandlers.some(hasToWaitFor);\n  }\n\n  private shouldBeCancelledByFinishedHandler(\n    handler: IGestureHandler\n  ): boolean {\n    const shouldBeCancelled = (otherHandler: IGestureHandler) => {\n      return (\n        this.shouldHandlerWaitForOther(handler, otherHandler) &&\n        otherHandler.state === State.END\n      );\n    };\n\n    return this.gestureHandlers.some(shouldBeCancelled);\n  }\n\n  private tryActivate(handler: IGestureHandler): void {\n    if (this.shouldBeCancelledByFinishedHandler(handler)) {\n      handler.cancel();\n      return;\n    }\n\n    if (this.hasOtherHandlerToWaitFor(handler)) {\n      this.addAwaitingHandler(handler);\n      return;\n    }\n\n    const handlerState = handler.state;\n\n    if (handlerState === State.CANCELLED || handlerState === State.FAILED) {\n      return;\n    }\n\n    if (this.shouldActivate(handler)) {\n      this.makeActive(handler);\n      return;\n    }\n\n    if (handlerState === State.ACTIVE) {\n      handler.fail();\n      return;\n    }\n\n    if (handlerState === State.BEGAN) {\n      handler.cancel();\n    }\n  }\n\n  private shouldActivate(handler: IGestureHandler): boolean {\n    const shouldBeCancelledBy = (otherHandler: IGestureHandler) => {\n      return this.shouldHandlerBeCancelledBy(handler, otherHandler);\n    };\n\n    return !this.gestureHandlers.some(shouldBeCancelledBy);\n  }\n\n  private cleanupAwaitingHandlers(handler: IGestureHandler): void {\n    const shouldWait = (otherHandler: IGestureHandler) => {\n      return (\n        !otherHandler.awaiting &&\n        this.shouldHandlerWaitForOther(otherHandler, handler)\n      );\n    };\n\n    for (const otherHandler of this.awaitingHandlers) {\n      if (shouldWait(otherHandler)) {\n        this.cleanHandler(otherHandler);\n        this.awaitingHandlersTags.delete(otherHandler.handlerTag);\n      }\n    }\n\n    this.awaitingHandlers = this.awaitingHandlers.filter((otherHandler) =>\n      this.awaitingHandlersTags.has(otherHandler.handlerTag)\n    );\n  }\n\n  public onHandlerStateChange(\n    handler: IGestureHandler,\n    newState: State,\n    oldState: State,\n    sendIfDisabled?: boolean\n  ): void {\n    if (!handler.enabled && !sendIfDisabled) {\n      return;\n    }\n\n    this.handlingChangeSemaphore += 1;\n\n    if (this.isFinished(newState)) {\n      for (const otherHandler of this.awaitingHandlers) {\n        if (\n          !this.shouldHandlerWaitForOther(otherHandler, handler) ||\n          !this.awaitingHandlersTags.has(otherHandler.handlerTag)\n        ) {\n          continue;\n        }\n\n        if (newState !== State.END) {\n          this.tryActivate(otherHandler);\n          continue;\n        }\n\n        otherHandler.cancel();\n\n        if (otherHandler.state === State.END) {\n          // Handle edge case, where discrete gestures end immediately after activation thus\n          // their state is set to END and when the gesture they are waiting for activates they\n          // should be cancelled, however `cancel` was never sent as gestures were already in the END state.\n          // Send synthetic BEGAN -> CANCELLED to properly handle JS logic\n          otherHandler.sendEvent(State.CANCELLED, State.BEGAN);\n        }\n\n        otherHandler.awaiting = false;\n      }\n    }\n\n    if (newState === State.ACTIVE) {\n      this.tryActivate(handler);\n    } else if (oldState === State.ACTIVE || oldState === State.END) {\n      if (handler.active) {\n        handler.sendEvent(newState, oldState);\n      } else if (\n        oldState === State.ACTIVE &&\n        (newState === State.CANCELLED || newState === State.FAILED)\n      ) {\n        handler.sendEvent(newState, State.BEGAN);\n      }\n    } else if (\n      oldState !== State.UNDETERMINED ||\n      newState !== State.CANCELLED\n    ) {\n      handler.sendEvent(newState, oldState);\n    }\n\n    this.handlingChangeSemaphore -= 1;\n\n    this.scheduleFinishedHandlersCleanup();\n\n    if (!this.awaitingHandlers.includes(handler)) {\n      this.cleanupAwaitingHandlers(handler);\n    }\n  }\n\n  private makeActive(handler: IGestureHandler): void {\n    const currentState = handler.state;\n\n    handler.active = true;\n    handler.shouldResetProgress = true;\n    handler.activationIndex = this.activationIndex++;\n\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      if (this.shouldHandlerBeCancelledBy(this.gestureHandlers[i], handler)) {\n        this.gestureHandlers[i].cancel();\n      }\n    }\n\n    for (const otherHandler of this.awaitingHandlers) {\n      if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n        otherHandler.awaiting = false;\n      }\n    }\n\n    handler.sendEvent(State.ACTIVE, State.BEGAN);\n\n    if (currentState !== State.ACTIVE) {\n      handler.sendEvent(State.END, State.ACTIVE);\n      if (currentState !== State.END) {\n        handler.sendEvent(State.UNDETERMINED, State.END);\n      }\n    }\n\n    if (!handler.awaiting) {\n      return;\n    }\n\n    handler.awaiting = false;\n\n    this.awaitingHandlers = this.awaitingHandlers.filter(\n      (otherHandler) => otherHandler !== handler\n    );\n  }\n\n  private addAwaitingHandler(handler: IGestureHandler): void {\n    if (this.awaitingHandlers.includes(handler)) {\n      return;\n    }\n\n    this.awaitingHandlers.push(handler);\n    this.awaitingHandlersTags.add(handler.handlerTag);\n\n    handler.awaiting = true;\n    handler.activationIndex = this.activationIndex++;\n  }\n\n  public recordHandlerIfNotPresent(handler: IGestureHandler): void {\n    if (this.gestureHandlers.includes(handler)) {\n      return;\n    }\n\n    this.gestureHandlers.push(handler);\n\n    handler.active = false;\n    handler.awaiting = false;\n    handler.activationIndex = Number.MAX_SAFE_INTEGER;\n  }\n\n  private shouldHandlerWaitForOther(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    return (\n      handler !== otherHandler &&\n      (handler.shouldWaitForHandlerFailure(otherHandler) ||\n        otherHandler.shouldRequireToWaitForFailure(handler))\n    );\n  }\n\n  private canRunSimultaneously(\n    gh1: IGestureHandler,\n    gh2: IGestureHandler\n  ): boolean {\n    return (\n      gh1 === gh2 ||\n      gh1.shouldRecognizeSimultaneously(gh2) ||\n      gh2.shouldRecognizeSimultaneously(gh1)\n    );\n  }\n\n  private shouldHandlerBeCancelledBy(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    if (this.canRunSimultaneously(handler, otherHandler)) {\n      return false;\n    }\n\n    if (handler.awaiting || handler.state === State.ACTIVE) {\n      // For now it always returns false\n      return handler.shouldBeCancelledByOther(otherHandler);\n    }\n\n    const handlerPointers: number[] = handler.getTrackedPointersID();\n    const otherPointers: number[] = otherHandler.getTrackedPointersID();\n\n    if (\n      !PointerTracker.shareCommonPointers(handlerPointers, otherPointers) &&\n      handler.delegate.view !== otherHandler.delegate.view\n    ) {\n      return this.checkOverlap(handler, otherHandler);\n    }\n\n    return true;\n  }\n\n  private checkOverlap(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    // If handlers don't have common pointers, default return value is false.\n    // However, if at least on pointer overlaps with both handlers, we return true\n    // This solves issue in overlapping parents example\n\n    // TODO: Find better way to handle that issue, for example by activation order and handler cancelling\n\n    const isPointerWithinBothBounds = (pointer: number) => {\n      const point = handler.tracker.getLastAbsoluteCoords(pointer);\n\n      return (\n        handler.delegate.isPointerInBounds(point) &&\n        otherHandler.delegate.isPointerInBounds(point)\n      );\n    };\n\n    return handler.getTrackedPointersID().some(isPointerWithinBothBounds);\n  }\n\n  private isFinished(state: State): boolean {\n    return (\n      state === State.END || state === State.FAILED || state === State.CANCELLED\n    );\n  }\n\n  // This function is called when handler receives touchdown event\n  // If handler is using mouse or pen as a pointer and any handler receives touch event,\n  // mouse/pen event dissappears - it doesn't send onPointerCancel nor onPointerUp (and others)\n  // This became a problem because handler was left at active state without any signal to end or fail\n  // To handle this, when new touch event is received, we loop through active handlers and check which type of\n  // pointer they're using. If there are any handler with mouse/pen as a pointer, we cancel them\n  public cancelMouseAndPenGestures(currentHandler: IGestureHandler): void {\n    this.gestureHandlers.forEach((handler: IGestureHandler) => {\n      if (\n        handler.pointerType !== PointerType.MOUSE &&\n        handler.pointerType !== PointerType.STYLUS\n      ) {\n        return;\n      }\n\n      if (handler !== currentHandler) {\n        handler.cancel();\n      } else {\n        // Handler that received touch event should have its pointer tracker reset\n        // This allows handler to smoothly change from mouse/pen to touch\n        // The drawback is, that when we try to use mouse/pen one more time, it doesn't send onPointerDown at the first time\n        // so it is required to click two times to get handler to work\n        //\n        // However, handler will receive manually created onPointerEnter that is triggered in EventManager in onPointerMove method.\n        // There may be possibility to use that fact to make handler respond properly to first mouse click\n        handler.tracker.resetTracker();\n      }\n    });\n  }\n\n  public static get instance(): GestureHandlerOrchestrator {\n    if (!GestureHandlerOrchestrator._instance) {\n      GestureHandlerOrchestrator._instance = new GestureHandlerOrchestrator();\n    }\n\n    return GestureHandlerOrchestrator._instance;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}