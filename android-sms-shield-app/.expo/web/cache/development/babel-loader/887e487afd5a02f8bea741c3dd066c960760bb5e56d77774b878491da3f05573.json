{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { EventTypes } from '../interfaces';\nexport default class RotationGestureDetector {\n  constructor(callbacks) {\n    _defineProperty(this, \"onRotationBegin\", void 0);\n    _defineProperty(this, \"onRotation\", void 0);\n    _defineProperty(this, \"onRotationEnd\", void 0);\n    _defineProperty(this, \"currentTime\", 0);\n    _defineProperty(this, \"previousTime\", 0);\n    _defineProperty(this, \"previousAngle\", 0);\n    _defineProperty(this, \"_rotation\", 0);\n    _defineProperty(this, \"_anchorX\", 0);\n    _defineProperty(this, \"_anchorY\", 0);\n    _defineProperty(this, \"isInProgress\", false);\n    _defineProperty(this, \"keyPointers\", [NaN, NaN]);\n    this.onRotationBegin = callbacks.onRotationBegin;\n    this.onRotation = callbacks.onRotation;\n    this.onRotationEnd = callbacks.onRotationEnd;\n  }\n  updateCurrent(event, tracker) {\n    this.previousTime = this.currentTime;\n    this.currentTime = event.time;\n    const [firstPointerID, secondPointerID] = this.keyPointers;\n    const firstPointerCoords = tracker.getLastAbsoluteCoords(firstPointerID);\n    const secondPointerCoords = tracker.getLastAbsoluteCoords(secondPointerID);\n    const vectorX = secondPointerCoords.x - firstPointerCoords.x;\n    const vectorY = secondPointerCoords.y - firstPointerCoords.y;\n    this._anchorX = (firstPointerCoords.x + secondPointerCoords.x) / 2;\n    this._anchorY = (firstPointerCoords.y + secondPointerCoords.y) / 2;\n    const angle = -Math.atan2(vectorY, vectorX);\n    this._rotation = Number.isNaN(this.previousAngle) ? 0 : this.previousAngle - angle;\n    this.previousAngle = angle;\n    if (this.rotation > Math.PI) {\n      this._rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI) {\n      this._rotation += Math.PI;\n    }\n    if (this.rotation > Math.PI / 2) {\n      this._rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI / 2) {\n      this._rotation += Math.PI;\n    }\n  }\n  finish() {\n    if (!this.isInProgress) {\n      return;\n    }\n    this.isInProgress = false;\n    this.keyPointers = [NaN, NaN];\n    this.onRotationEnd(this);\n  }\n  setKeyPointers(tracker) {\n    if (this.keyPointers[0] && this.keyPointers[1]) {\n      return;\n    }\n    const pointerIDs = tracker.trackedPointers.keys();\n    this.keyPointers[0] = pointerIDs.next().value;\n    this.keyPointers[1] = pointerIDs.next().value;\n  }\n  onTouchEvent(event, tracker) {\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n        this.isInProgress = false;\n        break;\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        if (this.isInProgress) {\n          break;\n        }\n        this.isInProgress = true;\n        this.previousTime = event.time;\n        this.previousAngle = NaN;\n        this.setKeyPointers(tracker);\n        this.updateCurrent(event, tracker);\n        this.onRotationBegin(this);\n        break;\n      case EventTypes.MOVE:\n        if (!this.isInProgress) {\n          break;\n        }\n        this.updateCurrent(event, tracker);\n        this.onRotation(this);\n        break;\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        if (!this.isInProgress) {\n          break;\n        }\n        if (this.keyPointers.indexOf(event.pointerId) >= 0) {\n          this.finish();\n        }\n        break;\n      case EventTypes.UP:\n        if (this.isInProgress) {\n          this.finish();\n        }\n        break;\n    }\n    return true;\n  }\n  reset() {\n    this.keyPointers = [NaN, NaN];\n    this.isInProgress = false;\n  }\n  get anchorX() {\n    return this._anchorX;\n  }\n  get anchorY() {\n    return this._anchorY;\n  }\n  get rotation() {\n    return this._rotation;\n  }\n  get timeDelta() {\n    return this.currentTime + this.previousTime;\n  }\n}","map":{"version":3,"names":["EventTypes","RotationGestureDetector","constructor","callbacks","_defineProperty","NaN","onRotationBegin","onRotation","onRotationEnd","updateCurrent","event","tracker","previousTime","currentTime","time","firstPointerID","secondPointerID","keyPointers","firstPointerCoords","getLastAbsoluteCoords","secondPointerCoords","vectorX","x","vectorY","y","_anchorX","_anchorY","angle","Math","atan2","_rotation","Number","isNaN","previousAngle","rotation","PI","finish","isInProgress","setKeyPointers","pointerIDs","trackedPointers","keys","next","value","onTouchEvent","eventType","DOWN","ADDITIONAL_POINTER_DOWN","MOVE","ADDITIONAL_POINTER_UP","indexOf","pointerId","UP","reset","anchorX","anchorY","timeDelta"],"sources":["C:\\Users\\Ntino\\Desktop\\End of year project\\N-pro\\android-sms-shield-app\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\detectors\\RotationGestureDetector.ts"],"sourcesContent":["import { AdaptedEvent, EventTypes } from '../interfaces';\nimport PointerTracker from '../tools/PointerTracker';\n\nexport interface RotationGestureListener {\n  onRotationBegin: (detector: RotationGestureDetector) => boolean;\n  onRotation: (detector: RotationGestureDetector) => boolean;\n  onRotationEnd: (detector: RotationGestureDetector) => void;\n}\n\nexport default class RotationGestureDetector\n  implements RotationGestureListener\n{\n  onRotationBegin: (detector: RotationGestureDetector) => boolean;\n  onRotation: (detector: RotationGestureDetector) => boolean;\n  onRotationEnd: (detector: RotationGestureDetector) => void;\n\n  private currentTime = 0;\n  private previousTime = 0;\n\n  private previousAngle = 0;\n  private _rotation = 0;\n\n  private _anchorX = 0;\n  private _anchorY = 0;\n\n  private isInProgress = false;\n\n  private keyPointers: number[] = [NaN, NaN];\n\n  constructor(callbacks: RotationGestureListener) {\n    this.onRotationBegin = callbacks.onRotationBegin;\n    this.onRotation = callbacks.onRotation;\n    this.onRotationEnd = callbacks.onRotationEnd;\n  }\n\n  private updateCurrent(event: AdaptedEvent, tracker: PointerTracker): void {\n    this.previousTime = this.currentTime;\n    this.currentTime = event.time;\n\n    const [firstPointerID, secondPointerID] = this.keyPointers;\n\n    const firstPointerCoords = tracker.getLastAbsoluteCoords(firstPointerID);\n    const secondPointerCoords = tracker.getLastAbsoluteCoords(secondPointerID);\n\n    const vectorX: number = secondPointerCoords.x - firstPointerCoords.x;\n    const vectorY: number = secondPointerCoords.y - firstPointerCoords.y;\n\n    this._anchorX = (firstPointerCoords.x + secondPointerCoords.x) / 2;\n    this._anchorY = (firstPointerCoords.y + secondPointerCoords.y) / 2;\n\n    // Angle diff should be positive when rotating in clockwise direction\n    const angle: number = -Math.atan2(vectorY, vectorX);\n\n    this._rotation = Number.isNaN(this.previousAngle)\n      ? 0\n      : this.previousAngle - angle;\n\n    this.previousAngle = angle;\n\n    if (this.rotation > Math.PI) {\n      this._rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI) {\n      this._rotation += Math.PI;\n    }\n\n    if (this.rotation > Math.PI / 2) {\n      this._rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI / 2) {\n      this._rotation += Math.PI;\n    }\n  }\n\n  private finish(): void {\n    if (!this.isInProgress) {\n      return;\n    }\n\n    this.isInProgress = false;\n    this.keyPointers = [NaN, NaN];\n    this.onRotationEnd(this);\n  }\n\n  private setKeyPointers(tracker: PointerTracker): void {\n    if (this.keyPointers[0] && this.keyPointers[1]) {\n      return;\n    }\n\n    const pointerIDs: IterableIterator<number> = tracker.trackedPointers.keys();\n\n    this.keyPointers[0] = pointerIDs.next().value as number;\n    this.keyPointers[1] = pointerIDs.next().value as number;\n  }\n\n  public onTouchEvent(event: AdaptedEvent, tracker: PointerTracker): boolean {\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n        this.isInProgress = false;\n        break;\n\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        if (this.isInProgress) {\n          break;\n        }\n        this.isInProgress = true;\n\n        this.previousTime = event.time;\n        this.previousAngle = NaN;\n\n        this.setKeyPointers(tracker);\n\n        this.updateCurrent(event, tracker);\n        this.onRotationBegin(this);\n        break;\n\n      case EventTypes.MOVE:\n        if (!this.isInProgress) {\n          break;\n        }\n\n        this.updateCurrent(event, tracker);\n        this.onRotation(this);\n\n        break;\n\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        if (!this.isInProgress) {\n          break;\n        }\n\n        if (this.keyPointers.indexOf(event.pointerId) >= 0) {\n          this.finish();\n        }\n\n        break;\n\n      case EventTypes.UP:\n        if (this.isInProgress) {\n          this.finish();\n        }\n        break;\n    }\n\n    return true;\n  }\n\n  public reset(): void {\n    this.keyPointers = [NaN, NaN];\n    this.isInProgress = false;\n  }\n\n  public get anchorX() {\n    return this._anchorX;\n  }\n\n  public get anchorY() {\n    return this._anchorY;\n  }\n\n  public get rotation() {\n    return this._rotation;\n  }\n\n  public get timeDelta() {\n    return this.currentTime + this.previousTime;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}