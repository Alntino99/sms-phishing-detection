{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nexport class MountRegistry {\n  static addMountListener(listener) {\n    this.mountListeners.add(listener);\n    return () => {\n      this.mountListeners.delete(listener);\n    };\n  }\n  static addUnmountListener(listener) {\n    this.unmountListeners.add(listener);\n    return () => {\n      this.unmountListeners.delete(listener);\n    };\n  }\n  static gestureHandlerWillMount(handler) {\n    this.mountListeners.forEach(listener => listener(handler));\n  }\n  static gestureHandlerWillUnmount(handler) {\n    this.unmountListeners.forEach(listener => listener(handler));\n  }\n  static gestureWillMount(gesture) {\n    this.mountListeners.forEach(listener => listener(gesture));\n  }\n  static gestureWillUnmount(gesture) {\n    this.unmountListeners.forEach(listener => listener(gesture));\n  }\n}\n_defineProperty(MountRegistry, \"mountListeners\", new Set());\n_defineProperty(MountRegistry, \"unmountListeners\", new Set());","map":{"version":3,"names":["MountRegistry","addMountListener","listener","mountListeners","add","delete","addUnmountListener","unmountListeners","gestureHandlerWillMount","handler","forEach","gestureHandlerWillUnmount","gestureWillMount","gesture","gestureWillUnmount","Set"],"sources":["C:\\Users\\Ntino\\Desktop\\End of year project\\N-pro\\android-sms-shield-app\\node_modules\\react-native-gesture-handler\\lib\\module\\mountRegistry.ts"],"sourcesContent":["import { GestureType } from './handlers/gestures/gesture';\n\ninterface ReactComponentWithHandlerTag extends React.Component {\n  handlerTag: number;\n}\n\nexport type GestureMountListener = (\n  gesture: GestureType | ReactComponentWithHandlerTag\n) => void;\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class MountRegistry {\n  private static mountListeners = new Set<GestureMountListener>();\n  private static unmountListeners = new Set<GestureMountListener>();\n\n  static addMountListener(listener: GestureMountListener): () => void {\n    this.mountListeners.add(listener);\n\n    return () => {\n      this.mountListeners.delete(listener);\n    };\n  }\n\n  static addUnmountListener(listener: GestureMountListener): () => void {\n    this.unmountListeners.add(listener);\n\n    return () => {\n      this.unmountListeners.delete(listener);\n    };\n  }\n\n  static gestureHandlerWillMount(handler: React.Component) {\n    this.mountListeners.forEach((listener) =>\n      listener(handler as ReactComponentWithHandlerTag)\n    );\n  }\n\n  static gestureHandlerWillUnmount(handler: React.Component) {\n    this.unmountListeners.forEach((listener) =>\n      listener(handler as ReactComponentWithHandlerTag)\n    );\n  }\n\n  static gestureWillMount(gesture: GestureType) {\n    this.mountListeners.forEach((listener) => listener(gesture));\n  }\n\n  static gestureWillUnmount(gesture: GestureType) {\n    this.unmountListeners.forEach((listener) => listener(gesture));\n  }\n}\n"],"mappings":";;;;;;;;;;;;;AAWA,OAAO,MAAMA,aAAN,CAAoB;EAIF,OAAhBC,gBAAgBA,CAACC,QAAD,EAA6C;IAClE,KAAKC,cAAL,CAAoBC,GAApB,CAAwBF,QAAxB;IAEA,OAAO,MAAM;MACX,KAAKC,cAAL,CAAoBE,MAApB,CAA2BH,QAA3B;IACD,CAFD;EAGD;EAEwB,OAAlBI,kBAAkBA,CAACJ,QAAD,EAA6C;IACpE,KAAKK,gBAAL,CAAsBH,GAAtB,CAA0BF,QAA1B;IAEA,OAAO,MAAM;MACX,KAAKK,gBAAL,CAAsBF,MAAtB,CAA6BH,QAA7B;IACD,CAFD;EAGD;EAE6B,OAAvBM,uBAAuBA,CAACC,OAAD,EAA2B;IACvD,KAAKN,cAAL,CAAoBO,OAApB,CAA6BR,QAAD,IAC1BA,QAAQ,CAACO,OAAD,CADV;EAGD;EAE+B,OAAzBE,yBAAyBA,CAACF,OAAD,EAA2B;IACzD,KAAKF,gBAAL,CAAsBG,OAAtB,CAA+BR,QAAD,IAC5BA,QAAQ,CAACO,OAAD,CADV;EAGD;EAEsB,OAAhBG,gBAAgBA,CAACC,OAAD,EAAuB;IAC5C,KAAKV,cAAL,CAAoBO,OAApB,CAA6BR,QAAD,IAAcA,QAAQ,CAACW,OAAD,CAAlD;EACD;EAEwB,OAAlBC,kBAAkBA,CAACD,OAAD,EAAuB;IAC9C,KAAKN,gBAAL,CAAsBG,OAAtB,CAA+BR,QAAD,IAAcA,QAAQ,CAACW,OAAD,CAApD;EACD;AAtCwB;gBAAdb,a,oBACqB,IAAIe,GAAJ,E;gBADrBf,a,sBAEuB,IAAIe,GAAJ,E","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}