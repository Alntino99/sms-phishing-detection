{"ast":null,"code":"'use strict';\n\nvar _jsxFileName = \"C:\\\\Users\\\\Ntino\\\\Desktop\\\\End of year project\\\\N-pro\\\\android-sms-shield-app\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\createAnimatedComponent\\\\createAnimatedComponent.js\";\nimport \"../layoutReanimation/animationsManager.js\";\nimport invariant from 'invariant';\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { getReduceMotionFromConfig } from \"../animation/util.js\";\nimport { maybeBuild } from \"../animationBuilder.js\";\nimport { LayoutAnimationType } from \"../commonTypes.js\";\nimport { SkipEnteringContext } from \"../component/LayoutAnimationConfig.js\";\nimport { adaptViewConfig } from \"../ConfigHelper.js\";\nimport { enableLayoutAnimations, markNodeAsRemovable, unmarkNodeAsRemovable } from \"../core.js\";\nimport { ReanimatedError } from \"../errors.js\";\nimport { getShadowNodeWrapperFromRef } from '../fabricUtils';\nimport { SharedTransition } from \"../layoutReanimation/index.js\";\nimport { configureWebLayoutAnimations, getReducedMotionFromConfig, saveSnapshot, startWebLayoutAnimation, tryActivateLayoutTransition } from \"../layoutReanimation/web/index.js\";\nimport { addHTMLMutationObserver } from \"../layoutReanimation/web/domUtils.js\";\nimport { findHostInstance } from '../platform-specific/findHostInstance';\nimport { isFabric, isJest, isReact19, isWeb, shouldBeUseWeb } from \"../PlatformChecker.js\";\nimport { componentWithRef } from \"../reactUtils.js\";\nimport { updateLayoutAnimations } from \"../UpdateLayoutAnimations.js\";\nimport { getViewInfo } from \"./getViewInfo.js\";\nimport { InlinePropManager } from \"./InlinePropManager.js\";\nimport JSPropsUpdater from './JSPropsUpdater';\nimport { NativeEventsManager } from \"./NativeEventsManager.js\";\nimport { PropsFilter } from \"./PropsFilter.js\";\nimport setAndForwardRef from \"./setAndForwardRef.js\";\nimport { flattenArray } from \"./utils.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IS_WEB = isWeb();\nconst IS_JEST = isJest();\nconst IS_REACT_19 = isReact19();\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\nif (IS_WEB) {\n  configureWebLayoutAnimations();\n}\nfunction onlyAnimatedStyles(styles) {\n  return styles.filter(style => style?.viewDescriptors);\n}\nlet id = 0;\nexport function createAnimatedComponent(Component, options) {\n  if (!IS_REACT_19) {\n    invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, `Looks like you're passing a function component \\`${Component.name}\\` to \\`createAnimatedComponent\\` function which supports only class components. Please wrap your function component with \\`React.forwardRef()\\` or use a class component instead.`);\n  }\n  class AnimatedComponent extends React.Component {\n    _styles = null;\n    _isFirstRender = true;\n    jestAnimatedStyle = {\n      value: {}\n    };\n    jestAnimatedProps = {\n      value: {}\n    };\n    _componentRef = null;\n    _hasAnimatedRef = false;\n    _componentDOMRef = null;\n    _sharedElementTransition = null;\n    _jsPropsUpdater = new JSPropsUpdater();\n    _InlinePropManager = new InlinePropManager();\n    _PropsFilter = new PropsFilter();\n    static contextType = SkipEnteringContext;\n    reanimatedID = id++;\n    _willUnmount = false;\n    constructor(props) {\n      super(props);\n      if (IS_JEST) {\n        this.jestAnimatedStyle = {\n          value: {}\n        };\n        this.jestAnimatedProps = {\n          value: {}\n        };\n      }\n      const entering = this.props.entering;\n      const skipEntering = this.context?.current;\n      if (!entering || getReducedMotionFromConfig(entering) || skipEntering || !isFabric()) {\n        return;\n      }\n      updateLayoutAnimations(this.reanimatedID, LayoutAnimationType.ENTERING, maybeBuild(entering, this.props?.style, AnimatedComponent.displayName));\n    }\n    componentDidMount() {\n      if (!IS_WEB) {\n        this._NativeEventsManager = new NativeEventsManager(this, options);\n      }\n      this._NativeEventsManager?.attachEvents();\n      this._jsPropsUpdater.addOnJSPropsChangeListener(this);\n      this._attachAnimatedStyles();\n      this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n      const layout = this.props.layout;\n      if (layout) {\n        this._configureLayoutTransition();\n      }\n      if (IS_WEB) {\n        if (this.props.exiting && this._componentDOMRef) {\n          saveSnapshot(this._componentDOMRef);\n        }\n        if (!this.props.entering || getReducedMotionFromConfig(this.props.entering)) {\n          this._isFirstRender = false;\n          return;\n        }\n        const skipEntering = this.context?.current;\n        if (!skipEntering) {\n          startWebLayoutAnimation(this.props, this._componentDOMRef, LayoutAnimationType.ENTERING);\n        } else if (this._componentDOMRef) {\n          this._componentDOMRef.style.visibility = 'initial';\n        }\n      }\n      const viewTag = this._viewInfo?.viewTag;\n      if (!SHOULD_BE_USE_WEB && isFabric() && this._willUnmount && typeof viewTag === 'number') {\n        unmarkNodeAsRemovable(viewTag);\n      }\n      this._isFirstRender = false;\n    }\n    componentWillUnmount() {\n      this._NativeEventsManager?.detachEvents();\n      this._jsPropsUpdater.removeOnJSPropsChangeListener(this);\n      this._detachStyles();\n      this._InlinePropManager.detachInlineProps();\n      if (this.props.sharedTransitionTag) {\n        this._configureSharedTransition(true);\n      }\n      this._sharedElementTransition?.unregisterTransition(this.getComponentViewTag(), true);\n      const exiting = this.props.exiting;\n      if (IS_WEB && this._componentDOMRef && exiting && !getReducedMotionFromConfig(exiting)) {\n        addHTMLMutationObserver();\n        startWebLayoutAnimation(this.props, this._componentDOMRef, LayoutAnimationType.EXITING);\n      } else if (exiting && !IS_WEB && !isFabric()) {\n        const reduceMotionInExiting = 'getReduceMotion' in exiting && typeof exiting.getReduceMotion === 'function' ? getReduceMotionFromConfig(exiting.getReduceMotion()) : getReduceMotionFromConfig();\n        if (!reduceMotionInExiting) {\n          updateLayoutAnimations(this.getComponentViewTag(), LayoutAnimationType.EXITING, maybeBuild(exiting, this.props?.style, AnimatedComponent.displayName));\n        }\n      }\n      const wrapper = this._viewInfo?.shadowNodeWrapper;\n      if (!SHOULD_BE_USE_WEB && isFabric() && wrapper) {\n        markNodeAsRemovable(wrapper);\n      }\n      this._willUnmount = true;\n    }\n    getComponentViewTag() {\n      return this._getViewInfo().viewTag;\n    }\n    _detachStyles() {\n      const viewTag = this.getComponentViewTag();\n      if (viewTag !== -1 && this._styles !== null) {\n        for (const style of this._styles) {\n          style.viewDescriptors.remove(viewTag);\n        }\n        if (this.props.animatedProps?.viewDescriptors) {\n          this.props.animatedProps.viewDescriptors.remove(viewTag);\n        }\n      }\n    }\n    _updateFromNative(props) {\n      if (options?.setNativeProps) {\n        options.setNativeProps(this._componentRef, props);\n      } else {\n        this._componentRef?.setNativeProps?.(props);\n      }\n    }\n    _getViewInfo() {\n      if (this._viewInfo !== undefined) {\n        return this._viewInfo;\n      }\n      let viewTag;\n      let viewName;\n      let shadowNodeWrapper = null;\n      let viewConfig;\n      let DOMElement = null;\n      if (SHOULD_BE_USE_WEB) {\n        viewTag = this._componentRef;\n        DOMElement = this._componentDOMRef;\n        viewName = null;\n        shadowNodeWrapper = null;\n        viewConfig = null;\n      } else {\n        const hostInstance = findHostInstance(this);\n        if (!hostInstance) {\n          throw new ReanimatedError('Cannot find host instance for this component. Maybe it renders nothing?');\n        }\n        const viewInfo = getViewInfo(hostInstance);\n        viewTag = viewInfo.viewTag;\n        viewName = viewInfo.viewName;\n        viewConfig = viewInfo.viewConfig;\n        shadowNodeWrapper = isFabric() ? getShadowNodeWrapperFromRef(this, hostInstance) : null;\n      }\n      this._viewInfo = {\n        viewTag,\n        viewName,\n        shadowNodeWrapper,\n        viewConfig\n      };\n      if (DOMElement) {\n        this._viewInfo.DOMElement = DOMElement;\n      }\n      return this._viewInfo;\n    }\n    _attachAnimatedStyles() {\n      const styles = this.props.style ? onlyAnimatedStyles(flattenArray(this.props.style)) : [];\n      const animatedProps = this.props.animatedProps;\n      const prevStyles = this._styles;\n      this._styles = styles;\n      const prevAnimatedProps = this._animatedProps;\n      this._animatedProps = animatedProps;\n      const {\n        viewTag,\n        viewName,\n        shadowNodeWrapper,\n        viewConfig\n      } = this._getViewInfo();\n      const hasReanimated2Props = this.props.animatedProps?.viewDescriptors || styles.length;\n      if (hasReanimated2Props && viewConfig) {\n        adaptViewConfig(viewConfig);\n      }\n      if (prevStyles) {\n        const hasOneSameStyle = styles.length === 1 && prevStyles.length === 1 && styles[0] === prevStyles[0];\n        if (!hasOneSameStyle) {\n          for (const prevStyle of prevStyles) {\n            const isPresent = styles.some(style => style === prevStyle);\n            if (!isPresent) {\n              prevStyle.viewDescriptors.remove(viewTag);\n            }\n          }\n        }\n      }\n      if (animatedProps && IS_JEST) {\n        this.jestAnimatedProps.value = Object.assign({}, this.jestAnimatedProps.value, animatedProps?.initial?.value);\n        if (animatedProps?.jestAnimatedValues) {\n          animatedProps.jestAnimatedValues.current = this.jestAnimatedProps;\n        }\n      }\n      styles.forEach(style => {\n        style.viewDescriptors.add({\n          tag: viewTag,\n          name: viewName,\n          shadowNodeWrapper\n        });\n        if (IS_JEST) {\n          this.jestAnimatedStyle.value = Object.assign({}, this.jestAnimatedStyle.value, style.initial.value);\n          style.jestAnimatedValues.current = this.jestAnimatedStyle;\n        }\n      });\n      if (prevAnimatedProps && prevAnimatedProps !== this.props.animatedProps) {\n        prevAnimatedProps.viewDescriptors.remove(viewTag);\n      }\n      if (this.props.animatedProps?.viewDescriptors) {\n        this.props.animatedProps.viewDescriptors.add({\n          tag: viewTag,\n          name: viewName,\n          shadowNodeWrapper: shadowNodeWrapper\n        });\n      }\n    }\n    componentDidUpdate(prevProps, _prevState, snapshot) {\n      const layout = this.props.layout;\n      const oldLayout = prevProps.layout;\n      if (layout !== oldLayout) {\n        this._configureLayoutTransition();\n      }\n      if (this.props.sharedTransitionTag !== undefined || prevProps.sharedTransitionTag !== undefined) {\n        this._configureSharedTransition();\n      }\n      this._NativeEventsManager?.updateEvents(prevProps);\n      this._attachAnimatedStyles();\n      this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n      if (IS_WEB && this.props.exiting && this._componentDOMRef) {\n        saveSnapshot(this._componentDOMRef);\n      }\n      if (IS_WEB && snapshot !== null && this.props.layout && !getReducedMotionFromConfig(this.props.layout)) {\n        tryActivateLayoutTransition(this.props, this._componentDOMRef, snapshot);\n      }\n    }\n    _configureLayoutTransition() {\n      if (IS_WEB) {\n        return;\n      }\n      const layout = this.props.layout;\n      if (layout && getReducedMotionFromConfig(layout)) {\n        return;\n      }\n      updateLayoutAnimations(this.getComponentViewTag(), LayoutAnimationType.LAYOUT, layout && maybeBuild(layout, undefined, AnimatedComponent.displayName));\n    }\n    _configureSharedTransition(isUnmounting = false) {\n      if (IS_WEB) {\n        return;\n      }\n      const {\n        sharedTransitionTag\n      } = this.props;\n      if (!sharedTransitionTag) {\n        this._sharedElementTransition?.unregisterTransition(this.getComponentViewTag(), isUnmounting);\n        this._sharedElementTransition = null;\n        return;\n      }\n      const sharedElementTransition = this.props.sharedTransitionStyle ?? this._sharedElementTransition ?? new SharedTransition();\n      sharedElementTransition.registerTransition(this.getComponentViewTag(), sharedTransitionTag, isUnmounting);\n      this._sharedElementTransition = sharedElementTransition;\n    }\n    _resolveComponentRef = ref => {\n      const componentRef = ref;\n      if (componentRef && componentRef.getAnimatableRef) {\n        this._hasAnimatedRef = true;\n        return componentRef.getAnimatableRef();\n      }\n      if (SHOULD_BE_USE_WEB) {\n        if (componentRef && componentRef.elementRef) {\n          this._componentDOMRef = componentRef.elementRef.current;\n        } else {\n          this._componentDOMRef = ref;\n        }\n      }\n      return componentRef;\n    };\n    _setComponentRef = setAndForwardRef({\n      getForwardedRef: () => this.props.forwardedRef,\n      setLocalRef: ref => {\n        if (!ref) {\n          return;\n        }\n        if (ref !== this._componentRef) {\n          this._componentRef = this._resolveComponentRef(ref);\n          this._viewInfo = undefined;\n        }\n        const tag = this.getComponentViewTag();\n        const {\n          layout,\n          entering,\n          exiting,\n          sharedTransitionTag\n        } = this.props;\n        if (layout || entering || exiting || sharedTransitionTag) {\n          if (!SHOULD_BE_USE_WEB) {\n            enableLayoutAnimations(true, false);\n          }\n          if (sharedTransitionTag) {\n            this._configureSharedTransition();\n          }\n          if (exiting && isFabric()) {\n            const reduceMotionInExiting = 'getReduceMotion' in exiting && typeof exiting.getReduceMotion === 'function' ? getReduceMotionFromConfig(exiting.getReduceMotion()) : getReduceMotionFromConfig();\n            if (!reduceMotionInExiting) {\n              updateLayoutAnimations(tag, LayoutAnimationType.EXITING, maybeBuild(exiting, this.props?.style, AnimatedComponent.displayName));\n            }\n          }\n          const skipEntering = this.context?.current;\n          if (entering && !isFabric() && !skipEntering && !IS_WEB) {\n            updateLayoutAnimations(tag, LayoutAnimationType.ENTERING, maybeBuild(entering, this.props?.style, AnimatedComponent.displayName));\n          }\n        }\n      }\n    });\n    getSnapshotBeforeUpdate() {\n      if (IS_WEB && this._componentDOMRef?.getBoundingClientRect !== undefined) {\n        return this._componentDOMRef.getBoundingClientRect();\n      }\n      return null;\n    }\n    render() {\n      const filteredProps = this._PropsFilter.filterNonAnimatedProps(this);\n      if (IS_JEST) {\n        filteredProps.jestAnimatedStyle = this.jestAnimatedStyle;\n        filteredProps.jestAnimatedProps = this.jestAnimatedProps;\n      }\n      if (this._isFirstRender && IS_WEB && filteredProps.entering && !getReducedMotionFromConfig(filteredProps.entering)) {\n        filteredProps.style = Array.isArray(filteredProps.style) ? filteredProps.style.concat([{\n          visibility: 'hidden'\n        }]) : Object.assign({}, filteredProps.style ?? {}, {\n          visibility: 'hidden'\n        });\n      }\n      const platformProps = Platform.select({\n        web: {},\n        default: {\n          collapsable: false\n        }\n      });\n      const skipEntering = this.context?.current;\n      const nativeID = skipEntering || !isFabric() ? undefined : `${this.reanimatedID}`;\n      const jestProps = IS_JEST ? {\n        jestInlineStyle: this.props.style,\n        jestAnimatedStyle: this.jestAnimatedStyle,\n        jestAnimatedProps: this.jestAnimatedProps\n      } : {};\n      return _jsxDEV(Component, Object.assign({\n        nativeID: nativeID\n      }, filteredProps, jestProps, {\n        ref: this._setComponentRef\n      }, platformProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 14\n      }, this);\n    }\n  }\n  AnimatedComponent.displayName = `AnimatedComponent(${Component.displayName || Component.name || 'Component'})`;\n  const animatedComponent = componentWithRef((props, ref) => _jsxDEV(AnimatedComponent, Object.assign({}, props, ref === null ? null : {\n    forwardedRef: ref\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 462,\n    columnNumber: 62\n  }, this));\n  animatedComponent.displayName = Component.displayName || Component.name || 'Component';\n  return animatedComponent;\n}","map":{"version":3,"names":["_jsxFileName","invariant","React","Platform","getReduceMotionFromConfig","maybeBuild","LayoutAnimationType","SkipEnteringContext","adaptViewConfig","enableLayoutAnimations","markNodeAsRemovable","unmarkNodeAsRemovable","ReanimatedError","getShadowNodeWrapperFromRef","SharedTransition","configureWebLayoutAnimations","getReducedMotionFromConfig","saveSnapshot","startWebLayoutAnimation","tryActivateLayoutTransition","addHTMLMutationObserver","findHostInstance","isFabric","isJest","isReact19","isWeb","shouldBeUseWeb","componentWithRef","updateLayoutAnimations","getViewInfo","InlinePropManager","JSPropsUpdater","NativeEventsManager","PropsFilter","setAndForwardRef","flattenArray","jsxDEV","_jsxDEV","IS_WEB","IS_JEST","IS_REACT_19","SHOULD_BE_USE_WEB","onlyAnimatedStyles","styles","filter","style","viewDescriptors","id","createAnimatedComponent","Component","options","prototype","isReactComponent","name","AnimatedComponent","_styles","_isFirstRender","jestAnimatedStyle","value","jestAnimatedProps","_componentRef","_hasAnimatedRef","_componentDOMRef","_sharedElementTransition","_jsPropsUpdater","_InlinePropManager","_PropsFilter","contextType","reanimatedID","_willUnmount","constructor","props","entering","skipEntering","context","current","ENTERING","displayName","componentDidMount","_NativeEventsManager","attachEvents","addOnJSPropsChangeListener","_attachAnimatedStyles","attachInlineProps","_getViewInfo","layout","_configureLayoutTransition","exiting","visibility","viewTag","_viewInfo","componentWillUnmount","detachEvents","removeOnJSPropsChangeListener","_detachStyles","detachInlineProps","sharedTransitionTag","_configureSharedTransition","unregisterTransition","getComponentViewTag","EXITING","reduceMotionInExiting","getReduceMotion","wrapper","shadowNodeWrapper","remove","animatedProps","_updateFromNative","setNativeProps","undefined","viewName","viewConfig","DOMElement","hostInstance","viewInfo","prevStyles","prevAnimatedProps","_animatedProps","hasReanimated2Props","length","hasOneSameStyle","prevStyle","isPresent","some","Object","assign","initial","jestAnimatedValues","forEach","add","tag","componentDidUpdate","prevProps","_prevState","snapshot","oldLayout","updateEvents","LAYOUT","isUnmounting","sharedElementTransition","sharedTransitionStyle","registerTransition","_resolveComponentRef","ref","componentRef","getAnimatableRef","elementRef","_setComponentRef","getForwardedRef","forwardedRef","setLocalRef","getSnapshotBeforeUpdate","getBoundingClientRect","render","filteredProps","filterNonAnimatedProps","Array","isArray","concat","platformProps","select","web","default","collapsable","nativeID","jestProps","jestInlineStyle","fileName","lineNumber","columnNumber","animatedComponent"],"sources":["C:\\Users\\Ntino\\Desktop\\End of year project\\N-pro\\android-sms-shield-app\\node_modules\\react-native-reanimated\\src\\createAnimatedComponent\\createAnimatedComponent.tsx"],"sourcesContent":["'use strict';\nimport '../layoutReanimation/animationsManager';\n\nimport invariant from 'invariant';\nimport type {\n  Component,\n  ComponentClass,\n  ComponentType,\n  FunctionComponent,\n  PropsWithoutRef,\n  Ref,\n  RefObject,\n} from 'react';\nimport React from 'react';\nimport type { FlatList, FlatListProps } from 'react-native';\nimport { Platform } from 'react-native';\n\nimport { getReduceMotionFromConfig } from '../animation/util';\nimport { maybeBuild } from '../animationBuilder';\nimport type { ShadowNodeWrapper, StyleProps } from '../commonTypes';\nimport { LayoutAnimationType } from '../commonTypes';\nimport { SkipEnteringContext } from '../component/LayoutAnimationConfig';\nimport { adaptViewConfig } from '../ConfigHelper';\nimport {\n  enableLayoutAnimations,\n  markNodeAsRemovable,\n  unmarkNodeAsRemovable,\n} from '../core';\nimport { ReanimatedError } from '../errors';\nimport { getShadowNodeWrapperFromRef } from '../fabricUtils';\nimport type { AnimateProps } from '../helperTypes';\nimport { SharedTransition } from '../layoutReanimation';\nimport {\n  configureWebLayoutAnimations,\n  getReducedMotionFromConfig,\n  saveSnapshot,\n  startWebLayoutAnimation,\n  tryActivateLayoutTransition,\n} from '../layoutReanimation/web';\nimport type { CustomConfig } from '../layoutReanimation/web/config';\nimport { addHTMLMutationObserver } from '../layoutReanimation/web/domUtils';\nimport { findHostInstance } from '../platform-specific/findHostInstance';\nimport {\n  isFabric,\n  isJest,\n  isReact19,\n  isWeb,\n  shouldBeUseWeb,\n} from '../PlatformChecker';\nimport { componentWithRef } from '../reactUtils';\nimport type { ReanimatedHTMLElement } from '../ReanimatedModule/js-reanimated';\nimport { updateLayoutAnimations } from '../UpdateLayoutAnimations';\nimport type {\n  AnimatedComponentProps,\n  AnimatedComponentRef,\n  AnimatedProps,\n  IAnimatedComponentInternal,\n  INativeEventsManager,\n  InitialComponentProps,\n  NestedArray,\n  ViewInfo,\n} from './commonTypes';\nimport { getViewInfo } from './getViewInfo';\nimport { InlinePropManager } from './InlinePropManager';\nimport JSPropsUpdater from './JSPropsUpdater';\nimport { NativeEventsManager } from './NativeEventsManager';\nimport { PropsFilter } from './PropsFilter';\nimport setAndForwardRef from './setAndForwardRef';\nimport { flattenArray } from './utils';\n\nconst IS_WEB = isWeb();\nconst IS_JEST = isJest();\nconst IS_REACT_19 = isReact19();\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n\nif (IS_WEB) {\n  configureWebLayoutAnimations();\n}\n\nfunction onlyAnimatedStyles(styles: StyleProps[]): StyleProps[] {\n  return styles.filter((style) => style?.viewDescriptors);\n}\n\ntype Options<P> = {\n  setNativeProps: (ref: AnimatedComponentRef, props: P) => void;\n};\n\n/**\n * Lets you create an Animated version of any React Native component.\n *\n * @param component - The component you want to make animatable.\n * @returns A component that Reanimated is capable of animating.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/createAnimatedComponent\n */\n\n// Don't change the order of overloads, since such a change breaks current behavior\nexport function createAnimatedComponent<P extends object>(\n  component: FunctionComponent<P>,\n  options?: Options<P>\n): FunctionComponent<AnimateProps<P>>;\n\nexport function createAnimatedComponent<P extends object>(\n  component: ComponentClass<P>,\n  options?: Options<P>\n): ComponentClass<AnimateProps<P>>;\n\nexport function createAnimatedComponent<P extends object>(\n  // Actually ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P> but we need this overload too\n  // since some external components (like FastImage) are typed just as ComponentType\n  component: ComponentType<P>,\n  options?: Options<P>\n): FunctionComponent<AnimateProps<P>> | ComponentClass<AnimateProps<P>>;\n\n/**\n * @deprecated Please use `Animated.FlatList` component instead of calling\n *   `Animated.createAnimatedComponent(FlatList)` manually.\n */\n// @ts-ignore This is required to create this overload, since type of createAnimatedComponent is incorrect and doesn't include typeof FlatList\nexport function createAnimatedComponent(\n  component: typeof FlatList<unknown>,\n  options?: Options<any>\n): ComponentClass<AnimateProps<FlatListProps<unknown>>>;\n\nlet id = 0;\n\nexport function createAnimatedComponent(\n  Component: ComponentType<InitialComponentProps>,\n  options?: Options<InitialComponentProps>\n): any {\n  if (!IS_REACT_19) {\n    invariant(\n      typeof Component !== 'function' ||\n        (Component.prototype && Component.prototype.isReactComponent),\n      `Looks like you're passing a function component \\`${Component.name}\\` to \\`createAnimatedComponent\\` function which supports only class components. Please wrap your function component with \\`React.forwardRef()\\` or use a class component instead.`\n    );\n  }\n\n  class AnimatedComponent\n    extends React.Component<AnimatedComponentProps<InitialComponentProps>>\n    implements IAnimatedComponentInternal\n  {\n    _styles: StyleProps[] | null = null;\n    _animatedProps?: Partial<AnimatedComponentProps<AnimatedProps>>;\n    _isFirstRender = true;\n    jestInlineStyle: NestedArray<StyleProps> | undefined;\n    jestAnimatedStyle: { value: StyleProps } = { value: {} };\n    jestAnimatedProps: { value: AnimatedProps } = { value: {} };\n    _componentRef: AnimatedComponentRef | HTMLElement | null = null;\n    _hasAnimatedRef = false;\n    // Used only on web\n    _componentDOMRef: HTMLElement | null = null;\n    _sharedElementTransition: SharedTransition | null = null;\n    _jsPropsUpdater = new JSPropsUpdater();\n    _InlinePropManager = new InlinePropManager();\n    _PropsFilter = new PropsFilter();\n    _NativeEventsManager?: INativeEventsManager;\n    _viewInfo?: ViewInfo;\n    static displayName: string;\n    static contextType = SkipEnteringContext;\n    context!: React.ContextType<typeof SkipEnteringContext>;\n    reanimatedID = id++;\n    _willUnmount: boolean = false;\n\n    constructor(props: AnimatedComponentProps<InitialComponentProps>) {\n      super(props);\n      if (IS_JEST) {\n        this.jestAnimatedStyle = { value: {} };\n        this.jestAnimatedProps = { value: {} };\n      }\n\n      const entering = this.props.entering;\n      const skipEntering = this.context?.current;\n      if (\n        !entering ||\n        getReducedMotionFromConfig(entering as CustomConfig) ||\n        skipEntering ||\n        !isFabric()\n      ) {\n        return;\n      }\n      // This call is responsible for configuring entering animations on Fabric.\n      updateLayoutAnimations(\n        this.reanimatedID,\n        LayoutAnimationType.ENTERING,\n        maybeBuild(entering, this.props?.style, AnimatedComponent.displayName)\n      );\n    }\n\n    componentDidMount() {\n      if (!IS_WEB) {\n        // It exists only on native platforms. We initialize it here because the ref to the animated component is available only post-mount\n        this._NativeEventsManager = new NativeEventsManager(this, options);\n      }\n      this._NativeEventsManager?.attachEvents();\n      this._jsPropsUpdater.addOnJSPropsChangeListener(this);\n      this._attachAnimatedStyles();\n      this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n\n      const layout = this.props.layout;\n      if (layout) {\n        this._configureLayoutTransition();\n      }\n\n      if (IS_WEB) {\n        if (this.props.exiting && this._componentDOMRef) {\n          saveSnapshot(this._componentDOMRef);\n        }\n\n        if (\n          !this.props.entering ||\n          getReducedMotionFromConfig(this.props.entering as CustomConfig)\n        ) {\n          this._isFirstRender = false;\n          return;\n        }\n\n        const skipEntering = this.context?.current;\n\n        if (!skipEntering) {\n          startWebLayoutAnimation(\n            this.props,\n            this._componentDOMRef as ReanimatedHTMLElement,\n            LayoutAnimationType.ENTERING\n          );\n        } else if (this._componentDOMRef) {\n          this._componentDOMRef.style.visibility = 'initial';\n        }\n      }\n\n      const viewTag = this._viewInfo?.viewTag;\n      if (\n        !SHOULD_BE_USE_WEB &&\n        isFabric() &&\n        this._willUnmount &&\n        typeof viewTag === 'number'\n      ) {\n        unmarkNodeAsRemovable(viewTag);\n      }\n\n      this._isFirstRender = false;\n    }\n\n    componentWillUnmount() {\n      this._NativeEventsManager?.detachEvents();\n      this._jsPropsUpdater.removeOnJSPropsChangeListener(this);\n      this._detachStyles();\n      this._InlinePropManager.detachInlineProps();\n      if (this.props.sharedTransitionTag) {\n        this._configureSharedTransition(true);\n      }\n      this._sharedElementTransition?.unregisterTransition(\n        this.getComponentViewTag(),\n        true\n      );\n\n      const exiting = this.props.exiting;\n\n      if (\n        IS_WEB &&\n        this._componentDOMRef &&\n        exiting &&\n        !getReducedMotionFromConfig(exiting as CustomConfig)\n      ) {\n        addHTMLMutationObserver();\n\n        startWebLayoutAnimation(\n          this.props,\n          this._componentDOMRef as ReanimatedHTMLElement,\n          LayoutAnimationType.EXITING\n        );\n      } else if (exiting && !IS_WEB && !isFabric()) {\n        const reduceMotionInExiting =\n          'getReduceMotion' in exiting &&\n          typeof exiting.getReduceMotion === 'function'\n            ? getReduceMotionFromConfig(exiting.getReduceMotion())\n            : getReduceMotionFromConfig();\n        if (!reduceMotionInExiting) {\n          updateLayoutAnimations(\n            this.getComponentViewTag(),\n            LayoutAnimationType.EXITING,\n            maybeBuild(\n              exiting,\n              this.props?.style,\n              AnimatedComponent.displayName\n            )\n          );\n        }\n      }\n\n      const wrapper = this._viewInfo?.shadowNodeWrapper;\n      if (!SHOULD_BE_USE_WEB && isFabric() && wrapper) {\n        // Mark node as removable on the native (C++) side, but only actually remove it\n        // when it no longer exists in the Shadow Tree. This ensures proper cleanup of\n        // animations/transitions/props while handling cases where the node might be\n        // remounted (e.g., when frozen) after componentWillUnmount is called.\n        markNodeAsRemovable(wrapper);\n      }\n\n      this._willUnmount = true;\n    }\n\n    getComponentViewTag() {\n      return this._getViewInfo().viewTag as number;\n    }\n\n    _detachStyles() {\n      const viewTag = this.getComponentViewTag();\n      if (viewTag !== -1 && this._styles !== null) {\n        for (const style of this._styles) {\n          style.viewDescriptors.remove(viewTag);\n        }\n        if (this.props.animatedProps?.viewDescriptors) {\n          this.props.animatedProps.viewDescriptors.remove(viewTag);\n        }\n      }\n    }\n\n    _updateFromNative(props: StyleProps) {\n      if (options?.setNativeProps) {\n        options.setNativeProps(\n          this._componentRef as AnimatedComponentRef,\n          props\n        );\n      } else {\n        (this._componentRef as AnimatedComponentRef)?.setNativeProps?.(props);\n      }\n    }\n\n    _getViewInfo(): ViewInfo {\n      if (this._viewInfo !== undefined) {\n        return this._viewInfo;\n      }\n\n      let viewTag: number | typeof this._componentRef;\n      let viewName: string | null;\n      let shadowNodeWrapper: ShadowNodeWrapper | null = null;\n      let viewConfig;\n      let DOMElement: HTMLElement | null = null;\n\n      if (SHOULD_BE_USE_WEB) {\n        // At this point I assume that `_setComponentRef` was already called and `_component` is set.\n        // `this._component` on web represents HTMLElement of our component, that's why we use casting\n        viewTag = this._componentRef;\n        DOMElement = this._componentDOMRef;\n        viewName = null;\n        shadowNodeWrapper = null;\n        viewConfig = null;\n      } else {\n        const hostInstance = findHostInstance(this);\n        if (!hostInstance) {\n          /* \n            findHostInstance can return null for a component that doesn't render anything \n            (render function returns null). Example: \n            svg Stop: https://github.com/react-native-svg/react-native-svg/blob/develop/src/elements/Stop.tsx\n          */\n          throw new ReanimatedError(\n            'Cannot find host instance for this component. Maybe it renders nothing?'\n          );\n        }\n\n        const viewInfo = getViewInfo(hostInstance);\n        viewTag = viewInfo.viewTag;\n        viewName = viewInfo.viewName;\n        viewConfig = viewInfo.viewConfig;\n        shadowNodeWrapper = isFabric()\n          ? getShadowNodeWrapperFromRef(this, hostInstance)\n          : null;\n      }\n      this._viewInfo = { viewTag, viewName, shadowNodeWrapper, viewConfig };\n      if (DOMElement) {\n        this._viewInfo.DOMElement = DOMElement;\n      }\n      return this._viewInfo;\n    }\n\n    _attachAnimatedStyles() {\n      const styles = this.props.style\n        ? onlyAnimatedStyles(flattenArray<StyleProps>(this.props.style))\n        : [];\n      const animatedProps = this.props.animatedProps;\n      const prevStyles = this._styles;\n      this._styles = styles;\n\n      const prevAnimatedProps = this._animatedProps;\n      this._animatedProps = animatedProps;\n\n      const { viewTag, viewName, shadowNodeWrapper, viewConfig } =\n        this._getViewInfo();\n\n      // update UI props whitelist for this view\n      const hasReanimated2Props =\n        this.props.animatedProps?.viewDescriptors || styles.length;\n      if (hasReanimated2Props && viewConfig) {\n        adaptViewConfig(viewConfig);\n      }\n\n      // remove old styles\n      if (prevStyles) {\n        // in most of the cases, views have only a single animated style and it remains unchanged\n        const hasOneSameStyle =\n          styles.length === 1 &&\n          prevStyles.length === 1 &&\n          styles[0] === prevStyles[0];\n\n        if (!hasOneSameStyle) {\n          // otherwise, remove each style that is not present in new styles\n          for (const prevStyle of prevStyles) {\n            const isPresent = styles.some((style) => style === prevStyle);\n            if (!isPresent) {\n              prevStyle.viewDescriptors.remove(viewTag);\n            }\n          }\n        }\n      }\n\n      if (animatedProps && IS_JEST) {\n        this.jestAnimatedProps.value = {\n          ...this.jestAnimatedProps.value,\n          ...animatedProps?.initial?.value,\n        };\n\n        if (animatedProps?.jestAnimatedValues) {\n          animatedProps.jestAnimatedValues.current = this.jestAnimatedProps;\n        }\n      }\n\n      styles.forEach((style) => {\n        style.viewDescriptors.add({\n          tag: viewTag,\n          name: viewName,\n          shadowNodeWrapper,\n        });\n        if (IS_JEST) {\n          /**\n           * We need to connect Jest's TestObject instance whose contains just\n           * props object with the updateProps() function where we update the\n           * properties of the component. We can't update props object directly\n           * because TestObject contains a copy of props - look at render\n           * function: const props = this._filterNonAnimatedProps(this.props);\n           */\n          this.jestAnimatedStyle.value = {\n            ...this.jestAnimatedStyle.value,\n            ...style.initial.value,\n          };\n          style.jestAnimatedValues.current = this.jestAnimatedStyle;\n        }\n      });\n\n      // detach old animatedProps\n      if (prevAnimatedProps && prevAnimatedProps !== this.props.animatedProps) {\n        prevAnimatedProps.viewDescriptors!.remove(viewTag as number);\n      }\n\n      // attach animatedProps property\n      if (this.props.animatedProps?.viewDescriptors) {\n        this.props.animatedProps.viewDescriptors.add({\n          tag: viewTag as number,\n          name: viewName!,\n          shadowNodeWrapper: shadowNodeWrapper!,\n        });\n      }\n    }\n\n    componentDidUpdate(\n      prevProps: AnimatedComponentProps<InitialComponentProps>,\n      _prevState: Readonly<unknown>,\n      // This type comes straight from React\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      snapshot: DOMRect | null\n    ) {\n      const layout = this.props.layout;\n      const oldLayout = prevProps.layout;\n      if (layout !== oldLayout) {\n        this._configureLayoutTransition();\n      }\n      if (\n        this.props.sharedTransitionTag !== undefined ||\n        prevProps.sharedTransitionTag !== undefined\n      ) {\n        this._configureSharedTransition();\n      }\n      this._NativeEventsManager?.updateEvents(prevProps);\n      this._attachAnimatedStyles();\n      this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n\n      if (IS_WEB && this.props.exiting && this._componentDOMRef) {\n        saveSnapshot(this._componentDOMRef);\n      }\n\n      // Snapshot won't be undefined because it comes from getSnapshotBeforeUpdate method\n      if (\n        IS_WEB &&\n        snapshot !== null &&\n        this.props.layout &&\n        !getReducedMotionFromConfig(this.props.layout as CustomConfig)\n      ) {\n        tryActivateLayoutTransition(\n          this.props,\n          this._componentDOMRef as ReanimatedHTMLElement,\n          snapshot\n        );\n      }\n    }\n\n    _configureLayoutTransition() {\n      if (IS_WEB) {\n        return;\n      }\n\n      const layout = this.props.layout;\n      if (layout && getReducedMotionFromConfig(layout as CustomConfig)) {\n        return;\n      }\n      updateLayoutAnimations(\n        this.getComponentViewTag(),\n        LayoutAnimationType.LAYOUT,\n        layout &&\n          maybeBuild(\n            layout,\n            undefined /* We don't have to warn user if style has common properties with animation for LAYOUT */,\n            AnimatedComponent.displayName\n          )\n      );\n    }\n\n    _configureSharedTransition(isUnmounting = false) {\n      if (IS_WEB) {\n        return;\n      }\n\n      const { sharedTransitionTag } = this.props;\n      if (!sharedTransitionTag) {\n        this._sharedElementTransition?.unregisterTransition(\n          this.getComponentViewTag(),\n          isUnmounting\n        );\n        this._sharedElementTransition = null;\n        return;\n      }\n      const sharedElementTransition =\n        this.props.sharedTransitionStyle ??\n        this._sharedElementTransition ??\n        new SharedTransition();\n      sharedElementTransition.registerTransition(\n        this.getComponentViewTag(),\n        sharedTransitionTag,\n        isUnmounting\n      );\n      this._sharedElementTransition = sharedElementTransition;\n    }\n\n    _resolveComponentRef = (ref: Component | HTMLElement | null) => {\n      const componentRef = ref as AnimatedComponentRef;\n      // Component can specify ref which should be animated when animated version of the component is created.\n      // Otherwise, we animate the component itself.\n      if (componentRef && componentRef.getAnimatableRef) {\n        this._hasAnimatedRef = true;\n        return componentRef.getAnimatableRef();\n      }\n      // Case for SVG components on Web\n      if (SHOULD_BE_USE_WEB) {\n        if (componentRef && componentRef.elementRef) {\n          this._componentDOMRef = componentRef.elementRef.current;\n        } else {\n          this._componentDOMRef = ref as HTMLElement;\n        }\n      }\n      return componentRef;\n    };\n\n    _setComponentRef = setAndForwardRef<Component | HTMLElement>({\n      getForwardedRef: () =>\n        this.props.forwardedRef as RefObject<\n          Component<Record<string, unknown>, Record<string, unknown>, unknown>\n        >,\n      setLocalRef: (ref) => {\n        if (!ref) {\n          // component has been unmounted\n          return;\n        }\n        if (ref !== this._componentRef) {\n          this._componentRef = this._resolveComponentRef(ref);\n          // if ref is changed, reset viewInfo\n          this._viewInfo = undefined;\n        }\n        const tag = this.getComponentViewTag();\n\n        const { layout, entering, exiting, sharedTransitionTag } = this.props;\n        if (layout || entering || exiting || sharedTransitionTag) {\n          if (!SHOULD_BE_USE_WEB) {\n            enableLayoutAnimations(true, false);\n          }\n\n          if (sharedTransitionTag) {\n            this._configureSharedTransition();\n          }\n          if (exiting && isFabric()) {\n            const reduceMotionInExiting =\n              'getReduceMotion' in exiting &&\n              typeof exiting.getReduceMotion === 'function'\n                ? getReduceMotionFromConfig(exiting.getReduceMotion())\n                : getReduceMotionFromConfig();\n            if (!reduceMotionInExiting) {\n              updateLayoutAnimations(\n                tag,\n                LayoutAnimationType.EXITING,\n                maybeBuild(\n                  exiting,\n                  this.props?.style,\n                  AnimatedComponent.displayName\n                )\n              );\n            }\n          }\n\n          const skipEntering = this.context?.current;\n          if (entering && !isFabric() && !skipEntering && !IS_WEB) {\n            updateLayoutAnimations(\n              tag,\n              LayoutAnimationType.ENTERING,\n              maybeBuild(\n                entering,\n                this.props?.style,\n                AnimatedComponent.displayName\n              )\n            );\n          }\n        }\n      },\n    });\n\n    // This is a component lifecycle method from React, therefore we are not calling it directly.\n    // It is called before the component gets rerendered. This way we can access components' position before it changed\n    // and later on, in componentDidUpdate, calculate translation for layout transition.\n    getSnapshotBeforeUpdate() {\n      if (\n        IS_WEB &&\n        this._componentDOMRef?.getBoundingClientRect !== undefined\n      ) {\n        return this._componentDOMRef.getBoundingClientRect();\n      }\n\n      return null;\n    }\n\n    render() {\n      const filteredProps = this._PropsFilter.filterNonAnimatedProps(this);\n\n      if (IS_JEST) {\n        filteredProps.jestAnimatedStyle = this.jestAnimatedStyle;\n        filteredProps.jestAnimatedProps = this.jestAnimatedProps;\n      }\n\n      // Layout animations on web are set inside `componentDidMount` method, which is called after first render.\n      // Because of that we can encounter a situation in which component is visible for a short amount of time, and later on animation triggers.\n      // I've tested that on various browsers and devices and it did not happen to me. To be sure that it won't happen to someone else,\n      // I've decided to hide component at first render. Its visibility is reset in `componentDidMount`.\n      if (\n        this._isFirstRender &&\n        IS_WEB &&\n        filteredProps.entering &&\n        !getReducedMotionFromConfig(filteredProps.entering as CustomConfig)\n      ) {\n        filteredProps.style = Array.isArray(filteredProps.style)\n          ? filteredProps.style.concat([{ visibility: 'hidden' }])\n          : {\n              ...(filteredProps.style ?? {}),\n              visibility: 'hidden', // Hide component until `componentDidMount` triggers\n            };\n      }\n\n      const platformProps = Platform.select({\n        web: {},\n        default: { collapsable: false },\n      });\n\n      const skipEntering = this.context?.current;\n      const nativeID =\n        skipEntering || !isFabric() ? undefined : `${this.reanimatedID}`;\n\n      const jestProps = IS_JEST\n        ? {\n            jestInlineStyle: this.props.style,\n            jestAnimatedStyle: this.jestAnimatedStyle,\n            jestAnimatedProps: this.jestAnimatedProps,\n          }\n        : {};\n\n      return (\n        <Component\n          nativeID={nativeID}\n          {...filteredProps}\n          {...jestProps}\n          // Casting is used here, because ref can be null - in that case it cannot be assigned to HTMLElement.\n          // After spending some time trying to figure out what to do with this problem, we decided to leave it this way\n          ref={this._setComponentRef as (ref: Component) => void}\n          {...platformProps}\n        />\n      );\n    }\n  }\n\n  AnimatedComponent.displayName = `AnimatedComponent(${\n    Component.displayName || Component.name || 'Component'\n  })`;\n\n  const animatedComponent = componentWithRef(\n    (\n      props: PropsWithoutRef<AnimatedComponentProps<InitialComponentProps>>,\n      ref: Ref<Component>\n    ) => (\n      <AnimatedComponent\n        {...props}\n        {...(ref === null ? null : { forwardedRef: ref })}\n      />\n    )\n  );\n\n  animatedComponent.displayName =\n    Component.displayName || Component.name || 'Component';\n\n  return animatedComponent;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}