{"ast":null,"code":"'use strict';\n\nvar _jsxFileName = \"C:\\\\Users\\\\Ntino\\\\Desktop\\\\End of year project\\\\N-pro\\\\android-sms-shield-app\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\component\\\\LayoutAnimationConfig.js\";\nimport React, { Children, Component, createContext, useEffect, useRef } from 'react';\nimport { setShouldAnimateExitingForTag } from \"../core.js\";\nimport { isReact19 } from \"../PlatformChecker.js\";\nimport { findNodeHandle } from '../platformFunctions/findNodeHandle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IS_REACT_19 = isReact19();\nexport const SkipEnteringContext = createContext(null);\nfunction SkipEntering(props) {\n  const skipValueRef = useRef(props.shouldSkip);\n  useEffect(() => {\n    skipValueRef.current = false;\n  }, [skipValueRef]);\n  const Provider = IS_REACT_19 ? SkipEnteringContext : SkipEnteringContext.Provider;\n  return _jsxDEV(Provider, {\n    value: skipValueRef,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, this);\n}\nexport class LayoutAnimationConfig extends Component {\n  getMaybeWrappedChildren() {\n    return Children.count(this.props.children) > 1 && this.props.skipExiting ? Children.map(this.props.children, child => _jsxDEV(LayoutAnimationConfig, {\n      skipExiting: true,\n      children: child\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 123\n    }, this)) : this.props.children;\n  }\n  setShouldAnimateExiting() {\n    if (Children.count(this.props.children) === 1) {\n      const tag = findNodeHandle(this);\n      if (tag) {\n        setShouldAnimateExitingForTag(tag, !this.props.skipExiting);\n      }\n    }\n  }\n  componentWillUnmount() {\n    if (this.props.skipExiting !== undefined) {\n      this.setShouldAnimateExiting();\n    }\n  }\n  render() {\n    const children = this.getMaybeWrappedChildren();\n    if (this.props.skipEntering === undefined) {\n      return children;\n    }\n    return _jsxDEV(SkipEntering, {\n      shouldSkip: this.props.skipEntering,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  }\n}","map":{"version":3,"names":["_jsxFileName","React","Children","Component","createContext","useEffect","useRef","setShouldAnimateExitingForTag","isReact19","findNodeHandle","jsxDEV","_jsxDEV","IS_REACT_19","SkipEnteringContext","SkipEntering","props","skipValueRef","shouldSkip","current","Provider","value","children","fileName","lineNumber","columnNumber","LayoutAnimationConfig","getMaybeWrappedChildren","count","skipExiting","map","child","setShouldAnimateExiting","tag","componentWillUnmount","undefined","render","skipEntering"],"sources":["C:\\Users\\Ntino\\Desktop\\End of year project\\N-pro\\android-sms-shield-app\\node_modules\\react-native-reanimated\\src\\component\\LayoutAnimationConfig.tsx"],"sourcesContent":["'use strict';\nimport type { ReactNode } from 'react';\nimport React, {\n  Children,\n  Component,\n  createContext,\n  useEffect,\n  useRef,\n} from 'react';\n\nimport { setShouldAnimateExitingForTag } from '../core';\nimport { isReact19 } from '../PlatformChecker';\nimport { findNodeHandle } from '../platformFunctions/findNodeHandle';\n\nconst IS_REACT_19 = isReact19();\n\nexport const SkipEnteringContext =\n  createContext<React.MutableRefObject<boolean> | null>(null);\n\n// skipEntering - don't animate entering of children on wrapper mount\n// skipExiting - don't animate exiting of children on wrapper unmount\ninterface LayoutAnimationConfigProps {\n  skipEntering?: boolean;\n  skipExiting?: boolean;\n  children: ReactNode;\n}\n\nfunction SkipEntering(props: { shouldSkip: boolean; children: ReactNode }) {\n  const skipValueRef = useRef(props.shouldSkip);\n\n  useEffect(() => {\n    skipValueRef.current = false;\n  }, [skipValueRef]);\n\n  const Provider = IS_REACT_19\n    ? SkipEnteringContext\n    : SkipEnteringContext.Provider;\n\n  return <Provider value={skipValueRef}>{props.children}</Provider>;\n}\n\n// skipExiting (unlike skipEntering) cannot be done by conditionally\n// configuring the animation in `createAnimatedComponent`, since at this stage\n// we don't know if the wrapper is going to be unmounted or not.\n// That's why we need to pass the skipExiting flag to the native side\n// when the wrapper is unmounted to prevent the animation.\n// Since `ReactNode` can be a list of nodes, we wrap every child with our wrapper\n// so we are able to access its tag with `findNodeHandle`.\n/**\n * A component that lets you skip entering and exiting animations.\n *\n * @param skipEntering - A boolean indicating whether children's entering\n *   animations should be skipped when `LayoutAnimationConfig` is mounted.\n * @param skipExiting - A boolean indicating whether children's exiting\n *   animations should be skipped when LayoutAnimationConfig is unmounted.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/layout-animation-config/\n */\nexport class LayoutAnimationConfig extends Component<LayoutAnimationConfigProps> {\n  getMaybeWrappedChildren() {\n    return Children.count(this.props.children) > 1 && this.props.skipExiting\n      ? Children.map(this.props.children, (child) => (\n          <LayoutAnimationConfig skipExiting>{child}</LayoutAnimationConfig>\n        ))\n      : this.props.children;\n  }\n\n  setShouldAnimateExiting() {\n    if (Children.count(this.props.children) === 1) {\n      const tag = findNodeHandle(this);\n      if (tag) {\n        setShouldAnimateExitingForTag(tag, !this.props.skipExiting);\n      }\n    }\n  }\n\n  componentWillUnmount(): void {\n    if (this.props.skipExiting !== undefined) {\n      this.setShouldAnimateExiting();\n    }\n  }\n\n  render(): ReactNode {\n    const children = this.getMaybeWrappedChildren();\n\n    if (this.props.skipEntering === undefined) {\n      return children;\n    }\n\n    return (\n      <SkipEntering shouldSkip={this.props.skipEntering}>\n        {children}\n      </SkipEntering>\n    );\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,YAAA;AAEZ,OAAOC,KAAK,IACVC,QAAQ,EACRC,SAAS,EACTC,aAAa,EACbC,SAAS,EACTC,MAAM,QACD,OAAO;AAEd,SAASC,6BAA6B,QAAQ,YAAS;AACvD,SAASC,SAAS,QAAQ,uBAAoB;AAC9C,SAASC,cAAc,QAAQ,qCAAqC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpE,MAAMC,WAAW,GAAGJ,SAAS,CAAC,CAAC;AAE/B,OAAO,MAAMK,mBAAmB,GAC9BT,aAAa,CAAyC,IAAI,CAAC;AAU7D,SAASU,YAAYA,CAACC,KAAmD,EAAE;EACzE,MAAMC,YAAY,GAAGV,MAAM,CAACS,KAAK,CAACE,UAAU,CAAC;EAE7CZ,SAAS,CAAC,MAAM;IACdW,YAAY,CAACE,OAAO,GAAG,KAAK;EAC9B,CAAC,EAAE,CAACF,YAAY,CAAC,CAAC;EAElB,MAAMG,QAAQ,GAAGP,WAAW,GACxBC,mBAAmB,GACnBA,mBAAmB,CAACM,QAAQ;EAEhC,OAAOR,OAAA,CAACQ,QAAQ;IAACC,KAAK,EAAEJ,YAAa;IAAAK,QAAA,EAAEN,KAAK,CAACM;EAAQ;IAAAC,QAAA,EAAAtB,YAAA;IAAAuB,UAAA;IAAAC,YAAA;EAAA,OAAW,CAAC;AACnE;AAkBA,OAAO,MAAMC,qBAAqB,SAAStB,SAAS,CAA6B;EAC/EuB,uBAAuBA,CAAA,EAAG;IACxB,OAAOxB,QAAQ,CAACyB,KAAK,CAAC,IAAI,CAACZ,KAAK,CAACM,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,CAACN,KAAK,CAACa,WAAW,GACpE1B,QAAQ,CAAC2B,GAAG,CAAC,IAAI,CAACd,KAAK,CAACM,QAAQ,EAAGS,KAAK,IACtCnB,OAAA,CAACc,qBAAqB;MAACG,WAAW;MAAAP,QAAA,EAAES;IAAK;MAAAR,QAAA,EAAAtB,YAAA;MAAAuB,UAAA;MAAAC,YAAA;IAAA,OAAwB,CAClE,CAAC,GACF,IAAI,CAACT,KAAK,CAACM,QAAQ;EACzB;EAEAU,uBAAuBA,CAAA,EAAG;IACxB,IAAI7B,QAAQ,CAACyB,KAAK,CAAC,IAAI,CAACZ,KAAK,CAACM,QAAQ,CAAC,KAAK,CAAC,EAAE;MAC7C,MAAMW,GAAG,GAAGvB,cAAc,CAAC,IAAI,CAAC;MAChC,IAAIuB,GAAG,EAAE;QACPzB,6BAA6B,CAACyB,GAAG,EAAE,CAAC,IAAI,CAACjB,KAAK,CAACa,WAAW,CAAC;MAC7D;IACF;EACF;EAEAK,oBAAoBA,CAAA,EAAS;IAC3B,IAAI,IAAI,CAAClB,KAAK,CAACa,WAAW,KAAKM,SAAS,EAAE;MACxC,IAAI,CAACH,uBAAuB,CAAC,CAAC;IAChC;EACF;EAEAI,MAAMA,CAAA,EAAc;IAClB,MAAMd,QAAQ,GAAG,IAAI,CAACK,uBAAuB,CAAC,CAAC;IAE/C,IAAI,IAAI,CAACX,KAAK,CAACqB,YAAY,KAAKF,SAAS,EAAE;MACzC,OAAOb,QAAQ;IACjB;IAEA,OACEV,OAAA,CAACG,YAAY;MAACG,UAAU,EAAE,IAAI,CAACF,KAAK,CAACqB,YAAa;MAAAf,QAAA,EAC/CA;IAAQ;MAAAC,QAAA,EAAAtB,YAAA;MAAAuB,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAEnB;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}