{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { useImperativeHandle, useRef } from 'react';\nimport { NativeViewGestureHandler, nativeViewProps } from './NativeViewGestureHandler';\nconst NATIVE_WRAPPER_PROPS_FILTER = [...nativeViewProps, 'onGestureHandlerEvent', 'onGestureHandlerStateChange'];\nexport default function createNativeWrapper(Component, config = {}) {\n  var _Component$render;\n  const ComponentWrapper = React.forwardRef((props, ref) => {\n    const {\n      gestureHandlerProps,\n      childProps\n    } = Object.keys(props).reduce((res, key) => {\n      const allowedKeys = NATIVE_WRAPPER_PROPS_FILTER;\n      if (allowedKeys.includes(key)) {\n        res.gestureHandlerProps[key] = props[key];\n      } else {\n        res.childProps[key] = props[key];\n      }\n      return res;\n    }, {\n      gestureHandlerProps: Object.assign({}, config),\n      childProps: {\n        enabled: props.enabled,\n        hitSlop: props.hitSlop,\n        testID: props.testID\n      }\n    });\n    const _ref = useRef(null);\n    const _gestureHandlerRef = useRef(null);\n    useImperativeHandle(ref, () => {\n      const node = _gestureHandlerRef.current;\n      if (_ref.current && node) {\n        _ref.current.handlerTag = node.handlerTag;\n        return _ref.current;\n      }\n      return null;\n    }, [_ref, _gestureHandlerRef]);\n    return React.createElement(NativeViewGestureHandler, _extends({}, gestureHandlerProps, {\n      ref: _gestureHandlerRef\n    }), React.createElement(Component, _extends({}, childProps, {\n      ref: _ref\n    })));\n  });\n  ComponentWrapper.displayName = (Component === null || Component === void 0 ? void 0 : Component.displayName) || (Component === null || Component === void 0 ? void 0 : (_Component$render = Component.render) === null || _Component$render === void 0 ? void 0 : _Component$render.name) || typeof Component === 'string' && Component || 'ComponentWrapper';\n  return ComponentWrapper;\n}","map":{"version":3,"names":["React","useImperativeHandle","useRef","NativeViewGestureHandler","nativeViewProps","NATIVE_WRAPPER_PROPS_FILTER","createNativeWrapper","Component","config","_Component$render","ComponentWrapper","forwardRef","props","ref","gestureHandlerProps","childProps","Object","keys","reduce","res","key","allowedKeys","includes","assign","enabled","hitSlop","testID","_ref","_gestureHandlerRef","node","current","handlerTag","createElement","_extends","displayName","render","name"],"sources":["C:\\Users\\Ntino\\Desktop\\End of year project\\N-pro\\android-sms-shield-app\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\createNativeWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useImperativeHandle, useRef } from 'react';\n\nimport {\n  NativeViewGestureHandler,\n  NativeViewGestureHandlerProps,\n  nativeViewProps,\n} from './NativeViewGestureHandler';\n\n/*\n * This array should consist of:\n *   - All keys in propTypes from NativeGestureHandler\n *     (and all keys in GestureHandlerPropTypes)\n *   - 'onGestureHandlerEvent'\n *   - 'onGestureHandlerStateChange'\n */\nconst NATIVE_WRAPPER_PROPS_FILTER = [\n  ...nativeViewProps,\n  'onGestureHandlerEvent',\n  'onGestureHandlerStateChange',\n] as const;\n\nexport default function createNativeWrapper<P>(\n  Component: React.ComponentType<P>,\n  config: Readonly<NativeViewGestureHandlerProps> = {}\n) {\n  const ComponentWrapper = React.forwardRef<\n    React.ComponentType<any>,\n    P & NativeViewGestureHandlerProps\n  >((props, ref) => {\n    // Filter out props that should be passed to gesture handler wrapper\n    const { gestureHandlerProps, childProps } = Object.keys(props).reduce(\n      (res, key) => {\n        // TS being overly protective with it's types, see https://github.com/microsoft/TypeScript/issues/26255#issuecomment-458013731 for more info\n        const allowedKeys: readonly string[] = NATIVE_WRAPPER_PROPS_FILTER;\n        if (allowedKeys.includes(key)) {\n          // @ts-ignore FIXME(TS)\n          res.gestureHandlerProps[key] = props[key];\n        } else {\n          // @ts-ignore FIXME(TS)\n          res.childProps[key] = props[key];\n        }\n        return res;\n      },\n      {\n        gestureHandlerProps: { ...config }, // Watch out not to modify config\n        childProps: {\n          enabled: props.enabled,\n          hitSlop: props.hitSlop,\n          testID: props.testID,\n        } as P,\n      }\n    );\n    const _ref = useRef<React.ComponentType<P>>(null);\n    const _gestureHandlerRef = useRef<React.ComponentType<P>>(null);\n    useImperativeHandle(\n      ref,\n      // @ts-ignore TODO(TS) decide how nulls work in this context\n      () => {\n        const node = _gestureHandlerRef.current;\n        // Add handlerTag for relations config\n        if (_ref.current && node) {\n          // @ts-ignore FIXME(TS) think about createHandler return type\n          _ref.current.handlerTag = node.handlerTag;\n          return _ref.current;\n        }\n        return null;\n      },\n      [_ref, _gestureHandlerRef]\n    );\n    return (\n      <NativeViewGestureHandler\n        {...gestureHandlerProps}\n        // @ts-ignore TODO(TS)\n        ref={_gestureHandlerRef}>\n        <Component {...childProps} ref={_ref} />\n      </NativeViewGestureHandler>\n    );\n  });\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  ComponentWrapper.displayName =\n    Component?.displayName ||\n    // @ts-ignore if render doesn't exist it will return undefined and go further\n    Component?.render?.name ||\n    (typeof Component === 'string' && Component) ||\n    'ComponentWrapper';\n\n  return ComponentWrapper;\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,mBAAT,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA,SACEC,wBADF,EAGEC,eAHF,QAIO,4BAJP;AAaA,MAAMC,2BAA2B,GAAG,CAClC,GAAGD,eAD+B,EAElC,uBAFkC,EAGlC,6BAHkC,CAApC;AAMA,eAAe,SAASE,mBAATA,CACbC,SADa,EAEbC,MAA+C,GAAG,EAFrC,EAGb;EAAA,IAAAC,iBAAA;EACA,MAAMC,gBAAgB,GAAGV,KAAK,CAACW,UAAN,CAGvB,CAACC,KAAD,EAAQC,GAAR,KAAgB;IAEhB,MAAM;MAAEC,mBAAF;MAAuBC;IAAvB,IAAsCC,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBM,MAAnB,CAC1C,CAACC,GAAD,EAAMC,GAAN,KAAc;MAEZ,MAAMC,WAA8B,GAAGhB,2BAAvC;MACA,IAAIgB,WAAW,CAACC,QAAZ,CAAqBF,GAArB,CAAJ,EAA+B;QAE7BD,GAAG,CAACL,mBAAJ,CAAwBM,GAAxB,IAA+BR,KAAK,CAACQ,GAAD,CAApC;MACD,CAHD,MAGO;QAELD,GAAG,CAACJ,UAAJ,CAAeK,GAAf,IAAsBR,KAAK,CAACQ,GAAD,CAA3B;MACD;MACD,OAAOD,GAAP;IACD,CAZyC,EAa1C;MACEL,mBAAmB,EAAAE,MAAA,CAAAO,MAAA,KAAOf,MAAA,CAD5B;MAEEO,UAAU,EAAE;QACVS,OAAO,EAAEZ,KAAK,CAACY,OADL;QAEVC,OAAO,EAAEb,KAAK,CAACa,OAFL;QAGVC,MAAM,EAAEd,KAAK,CAACc;MAHJ;IAFd,CAb0C,CAA5C;IAsBA,MAAMC,IAAI,GAAGzB,MAAM,CAAyB,IAAzB,CAAnB;IACA,MAAM0B,kBAAkB,GAAG1B,MAAM,CAAyB,IAAzB,CAAjC;IACAD,mBAAmB,CACjBY,GADiB,EAGjB,MAAM;MACJ,MAAMgB,IAAI,GAAGD,kBAAkB,CAACE,OAAhC;MAEA,IAAIH,IAAI,CAACG,OAAL,IAAgBD,IAApB,EAA0B;QAExBF,IAAI,CAACG,OAAL,CAAaC,UAAb,GAA0BF,IAAI,CAACE,UAA/B;QACA,OAAOJ,IAAI,CAACG,OAAZ;MACD;MACD,OAAO,IAAP;IACD,CAZgB,EAajB,CAACH,IAAD,EAAOC,kBAAP,CAbiB,CAAnB;IAeA,OACE5B,KAAA,CAAAgC,aAAA,CAAC7B,wBAAD,EAAA8B,QAAA,KACMnB,mBADN;MAGED,GAAG,EAAEe;IAHP,IAIE5B,KAAA,CAAAgC,aAAA,CAACzB,SAAD,EAAA0B,QAAA,KAAelB,UAAf;MAA2BF,GAAG,EAAEc;IAAhC,GAJF,CADF;EAQD,CApDwB,CAAzB;EAuDAjB,gBAAgB,CAACwB,WAAjB,GACE,CAAA3B,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAE2B,WAAX,MAEA3B,SAFA,aAEAA,SAFA,wBAAAE,iBAAA,GAEAF,SAAS,CAAE4B,MAFX,cAAA1B,iBAAA,uBAEAA,iBAAA,CAAmB2B,IAFnB,KAGC,OAAO7B,SAAP,KAAqB,QAArB,IAAiCA,SAHlC,IAIA,kBALF;EAOA,OAAOG,gBAAP;AACD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}