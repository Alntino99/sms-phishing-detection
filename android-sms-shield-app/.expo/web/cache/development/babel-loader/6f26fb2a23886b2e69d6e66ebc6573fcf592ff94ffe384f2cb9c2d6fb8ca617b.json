{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { State } from '../../State';\nexport default class InteractionManager {\n  constructor() {\n    _defineProperty(this, \"waitForRelations\", new Map());\n    _defineProperty(this, \"simultaneousRelations\", new Map());\n    _defineProperty(this, \"blocksHandlersRelations\", new Map());\n  }\n  configureInteractions(handler, config) {\n    this.dropRelationsForHandlerWithTag(handler.handlerTag);\n    if (config.waitFor) {\n      const waitFor = [];\n      config.waitFor.forEach(otherHandler => {\n        if (typeof otherHandler === 'number') {\n          waitFor.push(otherHandler);\n        } else {\n          waitFor.push(otherHandler.handlerTag);\n        }\n      });\n      this.waitForRelations.set(handler.handlerTag, waitFor);\n    }\n    if (config.simultaneousHandlers) {\n      const simultaneousHandlers = [];\n      config.simultaneousHandlers.forEach(otherHandler => {\n        if (typeof otherHandler === 'number') {\n          simultaneousHandlers.push(otherHandler);\n        } else {\n          simultaneousHandlers.push(otherHandler.handlerTag);\n        }\n      });\n      this.simultaneousRelations.set(handler.handlerTag, simultaneousHandlers);\n    }\n    if (config.blocksHandlers) {\n      const blocksHandlers = [];\n      config.blocksHandlers.forEach(otherHandler => {\n        if (typeof otherHandler === 'number') {\n          blocksHandlers.push(otherHandler);\n        } else {\n          blocksHandlers.push(otherHandler.handlerTag);\n        }\n      });\n      this.blocksHandlersRelations.set(handler.handlerTag, blocksHandlers);\n    }\n  }\n  shouldWaitForHandlerFailure(handler, otherHandler) {\n    const waitFor = this.waitForRelations.get(handler.handlerTag);\n    return (waitFor === null || waitFor === void 0 ? void 0 : waitFor.find(tag => {\n      return tag === otherHandler.handlerTag;\n    })) !== undefined;\n  }\n  shouldRecognizeSimultaneously(handler, otherHandler) {\n    const simultaneousHandlers = this.simultaneousRelations.get(handler.handlerTag);\n    return (simultaneousHandlers === null || simultaneousHandlers === void 0 ? void 0 : simultaneousHandlers.find(tag => {\n      return tag === otherHandler.handlerTag;\n    })) !== undefined;\n  }\n  shouldRequireHandlerToWaitForFailure(handler, otherHandler) {\n    const waitFor = this.blocksHandlersRelations.get(handler.handlerTag);\n    return (waitFor === null || waitFor === void 0 ? void 0 : waitFor.find(tag => {\n      return tag === otherHandler.handlerTag;\n    })) !== undefined;\n  }\n  shouldHandlerBeCancelledBy(_handler, otherHandler) {\n    var _otherHandler$isButto;\n    const isNativeHandler = otherHandler.constructor.name === 'NativeViewGestureHandler';\n    const isActive = otherHandler.state === State.ACTIVE;\n    const isButton = ((_otherHandler$isButto = otherHandler.isButton) === null || _otherHandler$isButto === void 0 ? void 0 : _otherHandler$isButto.call(otherHandler)) === true;\n    return isNativeHandler && isActive && !isButton;\n  }\n  dropRelationsForHandlerWithTag(handlerTag) {\n    this.waitForRelations.delete(handlerTag);\n    this.simultaneousRelations.delete(handlerTag);\n    this.blocksHandlersRelations.delete(handlerTag);\n  }\n  reset() {\n    this.waitForRelations.clear();\n    this.simultaneousRelations.clear();\n    this.blocksHandlersRelations.clear();\n  }\n  static get instance() {\n    if (!this._instance) {\n      this._instance = new InteractionManager();\n    }\n    return this._instance;\n  }\n}\n_defineProperty(InteractionManager, \"_instance\", void 0);","map":{"version":3,"names":["State","InteractionManager","constructor","_defineProperty","Map","configureInteractions","handler","config","dropRelationsForHandlerWithTag","handlerTag","waitFor","forEach","otherHandler","push","waitForRelations","set","simultaneousHandlers","simultaneousRelations","blocksHandlers","blocksHandlersRelations","shouldWaitForHandlerFailure","get","find","tag","undefined","shouldRecognizeSimultaneously","shouldRequireHandlerToWaitForFailure","shouldHandlerBeCancelledBy","_handler","_otherHandler$isButto","isNativeHandler","name","isActive","state","ACTIVE","isButton","call","delete","reset","clear","instance","_instance"],"sources":["C:\\Users\\Ntino\\Desktop\\End of year project\\N-pro\\android-sms-shield-app\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\InteractionManager.ts"],"sourcesContent":["import type IGestureHandler from '../handlers/IGestureHandler';\nimport { State } from '../../State';\nimport { Config, Handler } from '../interfaces';\n\nexport default class InteractionManager {\n  private static _instance: InteractionManager;\n  private readonly waitForRelations: Map<number, number[]> = new Map();\n  private readonly simultaneousRelations: Map<number, number[]> = new Map();\n  private readonly blocksHandlersRelations: Map<number, number[]> = new Map();\n\n  // Private becaues of singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  public configureInteractions(handler: IGestureHandler, config: Config) {\n    this.dropRelationsForHandlerWithTag(handler.handlerTag);\n\n    if (config.waitFor) {\n      const waitFor: number[] = [];\n      config.waitFor.forEach((otherHandler: Handler): void => {\n        // New API reference\n        if (typeof otherHandler === 'number') {\n          waitFor.push(otherHandler);\n        } else {\n          // Old API reference\n          waitFor.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.waitForRelations.set(handler.handlerTag, waitFor);\n    }\n\n    if (config.simultaneousHandlers) {\n      const simultaneousHandlers: number[] = [];\n      config.simultaneousHandlers.forEach((otherHandler: Handler): void => {\n        if (typeof otherHandler === 'number') {\n          simultaneousHandlers.push(otherHandler);\n        } else {\n          simultaneousHandlers.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.simultaneousRelations.set(handler.handlerTag, simultaneousHandlers);\n    }\n\n    if (config.blocksHandlers) {\n      const blocksHandlers: number[] = [];\n      config.blocksHandlers.forEach((otherHandler: Handler): void => {\n        if (typeof otherHandler === 'number') {\n          blocksHandlers.push(otherHandler);\n        } else {\n          blocksHandlers.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.blocksHandlersRelations.set(handler.handlerTag, blocksHandlers);\n    }\n  }\n\n  public shouldWaitForHandlerFailure(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    const waitFor: number[] | undefined = this.waitForRelations.get(\n      handler.handlerTag\n    );\n\n    return (\n      waitFor?.find((tag: number) => {\n        return tag === otherHandler.handlerTag;\n      }) !== undefined\n    );\n  }\n\n  public shouldRecognizeSimultaneously(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    const simultaneousHandlers: number[] | undefined =\n      this.simultaneousRelations.get(handler.handlerTag);\n\n    return (\n      simultaneousHandlers?.find((tag: number) => {\n        return tag === otherHandler.handlerTag;\n      }) !== undefined\n    );\n  }\n\n  public shouldRequireHandlerToWaitForFailure(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    const waitFor: number[] | undefined = this.blocksHandlersRelations.get(\n      handler.handlerTag\n    );\n\n    return (\n      waitFor?.find((tag: number) => {\n        return tag === otherHandler.handlerTag;\n      }) !== undefined\n    );\n  }\n\n  public shouldHandlerBeCancelledBy(\n    _handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    // We check constructor name instead of using `instanceof` in order do avoid circular dependencies\n    const isNativeHandler =\n      otherHandler.constructor.name === 'NativeViewGestureHandler';\n    const isActive = otherHandler.state === State.ACTIVE;\n    const isButton = otherHandler.isButton?.() === true;\n\n    return isNativeHandler && isActive && !isButton;\n  }\n\n  public dropRelationsForHandlerWithTag(handlerTag: number): void {\n    this.waitForRelations.delete(handlerTag);\n    this.simultaneousRelations.delete(handlerTag);\n    this.blocksHandlersRelations.delete(handlerTag);\n  }\n\n  public reset() {\n    this.waitForRelations.clear();\n    this.simultaneousRelations.clear();\n    this.blocksHandlersRelations.clear();\n  }\n\n  public static get instance(): InteractionManager {\n    if (!this._instance) {\n      this._instance = new InteractionManager();\n    }\n\n    return this._instance;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}